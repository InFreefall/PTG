/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef HandyPTG_TYPES_H
#define HandyPTG_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _HPTGEvent__isset {
  _HPTGEvent__isset() : index(false), type(false), sender(false), data(false), senderName(false) {}
  bool index;
  bool type;
  bool sender;
  bool data;
  bool senderName;
} _HPTGEvent__isset;

class HPTGEvent {
 public:

  static const char* ascii_fingerprint; // = "ADD2353D4DB2296FA8209BA8B514B478";
  static const uint8_t binary_fingerprint[16]; // = {0xAD,0xD2,0x35,0x3D,0x4D,0xB2,0x29,0x6F,0xA8,0x20,0x9B,0xA8,0xB5,0x14,0xB4,0x78};

  HPTGEvent() : index(0), type(""), sender(0), senderName("") {
  }

  virtual ~HPTGEvent() throw() {}

  int32_t index;
  std::string type;
  int32_t sender;
  std::vector<std::string>  data;
  std::string senderName;

  _HPTGEvent__isset __isset;

  bool operator == (const HPTGEvent & rhs) const
  {
    if (!(index == rhs.index))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(sender == rhs.sender))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(senderName == rhs.senderName))
      return false;
    return true;
  }
  bool operator != (const HPTGEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HPTGEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
