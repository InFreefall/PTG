// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "HandyPTG.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class HandyPTGHandler : virtual public HandyPTGIf {
 public:
  HandyPTGHandler() {
    // Your initialization goes here
  }

  void HPTGgetEvents(std::vector<HPTGEvent> & _return, const int32_t sinceIndex) {
    // Your implementation goes here
    printf("HPTGgetEvents\n");
  }

  void HPTGdrawCard() {
    // Your implementation goes here
    printf("HPTGdrawCard\n");
  }

  void HPTGplayCard(const std::string& abbreviation, const std::string& index) {
    // Your implementation goes here
    printf("HPTGplayCard\n");
  }

  void HPTGlandCard(const std::string& abbreviation, const std::string& index) {
    // Your implementation goes here
    printf("HPTGlandCard\n");
  }

  void HPTGdiscardCard(const std::string& abbreviation, const std::string& index) {
    // Your implementation goes here
    printf("HPTGdiscardCard\n");
  }

  void HPTGgetCard(std::string& _return, const std::string& abbreviation, const std::string& index) {
    // Your implementation goes here
    printf("HPTGgetCard\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<HandyPTGHandler> handler(new HandyPTGHandler());
  shared_ptr<TProcessor> processor(new HandyPTGProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

