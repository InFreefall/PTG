/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef HandyPTG_H
#define HandyPTG_H

#include <TProcessor.h>
#include "HandyPTG_types.h"



class HandyPTGIf {
 public:
  virtual ~HandyPTGIf() {}
  virtual void HPTGgetEvents(std::vector<HPTGEvent> & _return, const int32_t sinceIndex) = 0;
  virtual void HPTGdrawCard() = 0;
  virtual void HPTGplayCard(const std::string& abbreviation, const std::string& index) = 0;
  virtual void HPTGlandCard(const std::string& abbreviation, const std::string& index) = 0;
  virtual void HPTGdiscardCard(const std::string& abbreviation, const std::string& index) = 0;
  virtual void HPTGgetCard(std::string& _return, const std::string& abbreviation, const std::string& index) = 0;
};

class HandyPTGNull : virtual public HandyPTGIf {
 public:
  virtual ~HandyPTGNull() {}
  void HPTGgetEvents(std::vector<HPTGEvent> & /* _return */, const int32_t /* sinceIndex */) {
    return;
  }
  void HPTGdrawCard() {
    return;
  }
  void HPTGplayCard(const std::string& /* abbreviation */, const std::string& /* index */) {
    return;
  }
  void HPTGlandCard(const std::string& /* abbreviation */, const std::string& /* index */) {
    return;
  }
  void HPTGdiscardCard(const std::string& /* abbreviation */, const std::string& /* index */) {
    return;
  }
  void HPTGgetCard(std::string& /* _return */, const std::string& /* abbreviation */, const std::string& /* index */) {
    return;
  }
};

typedef struct _HandyPTG_HPTGgetEvents_args__isset {
  _HandyPTG_HPTGgetEvents_args__isset() : sinceIndex(false) {}
  bool sinceIndex;
} _HandyPTG_HPTGgetEvents_args__isset;

class HandyPTG_HPTGgetEvents_args {
 public:

  HandyPTG_HPTGgetEvents_args() : sinceIndex(0) {
  }

  virtual ~HandyPTG_HPTGgetEvents_args() throw() {}

  int32_t sinceIndex;

  _HandyPTG_HPTGgetEvents_args__isset __isset;

  bool operator == (const HandyPTG_HPTGgetEvents_args & rhs) const
  {
    if (!(sinceIndex == rhs.sinceIndex))
      return false;
    return true;
  }
  bool operator != (const HandyPTG_HPTGgetEvents_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandyPTG_HPTGgetEvents_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HandyPTG_HPTGgetEvents_pargs {
 public:


  virtual ~HandyPTG_HPTGgetEvents_pargs() throw() {}

  const int32_t* sinceIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HandyPTG_HPTGgetEvents_result__isset {
  _HandyPTG_HPTGgetEvents_result__isset() : success(false) {}
  bool success;
} _HandyPTG_HPTGgetEvents_result__isset;

class HandyPTG_HPTGgetEvents_result {
 public:

  HandyPTG_HPTGgetEvents_result() {
  }

  virtual ~HandyPTG_HPTGgetEvents_result() throw() {}

  std::vector<HPTGEvent>  success;

  _HandyPTG_HPTGgetEvents_result__isset __isset;

  bool operator == (const HandyPTG_HPTGgetEvents_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HandyPTG_HPTGgetEvents_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandyPTG_HPTGgetEvents_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HandyPTG_HPTGgetEvents_presult__isset {
  _HandyPTG_HPTGgetEvents_presult__isset() : success(false) {}
  bool success;
} _HandyPTG_HPTGgetEvents_presult__isset;

class HandyPTG_HPTGgetEvents_presult {
 public:


  virtual ~HandyPTG_HPTGgetEvents_presult() throw() {}

  std::vector<HPTGEvent> * success;

  _HandyPTG_HPTGgetEvents_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class HandyPTG_HPTGdrawCard_args {
 public:

  HandyPTG_HPTGdrawCard_args() {
  }

  virtual ~HandyPTG_HPTGdrawCard_args() throw() {}


  bool operator == (const HandyPTG_HPTGdrawCard_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HandyPTG_HPTGdrawCard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandyPTG_HPTGdrawCard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HandyPTG_HPTGdrawCard_pargs {
 public:


  virtual ~HandyPTG_HPTGdrawCard_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HandyPTG_HPTGplayCard_args__isset {
  _HandyPTG_HPTGplayCard_args__isset() : abbreviation(false), index(false) {}
  bool abbreviation;
  bool index;
} _HandyPTG_HPTGplayCard_args__isset;

class HandyPTG_HPTGplayCard_args {
 public:

  HandyPTG_HPTGplayCard_args() : abbreviation(""), index("") {
  }

  virtual ~HandyPTG_HPTGplayCard_args() throw() {}

  std::string abbreviation;
  std::string index;

  _HandyPTG_HPTGplayCard_args__isset __isset;

  bool operator == (const HandyPTG_HPTGplayCard_args & rhs) const
  {
    if (!(abbreviation == rhs.abbreviation))
      return false;
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const HandyPTG_HPTGplayCard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandyPTG_HPTGplayCard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HandyPTG_HPTGplayCard_pargs {
 public:


  virtual ~HandyPTG_HPTGplayCard_pargs() throw() {}

  const std::string* abbreviation;
  const std::string* index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HandyPTG_HPTGlandCard_args__isset {
  _HandyPTG_HPTGlandCard_args__isset() : abbreviation(false), index(false) {}
  bool abbreviation;
  bool index;
} _HandyPTG_HPTGlandCard_args__isset;

class HandyPTG_HPTGlandCard_args {
 public:

  HandyPTG_HPTGlandCard_args() : abbreviation(""), index("") {
  }

  virtual ~HandyPTG_HPTGlandCard_args() throw() {}

  std::string abbreviation;
  std::string index;

  _HandyPTG_HPTGlandCard_args__isset __isset;

  bool operator == (const HandyPTG_HPTGlandCard_args & rhs) const
  {
    if (!(abbreviation == rhs.abbreviation))
      return false;
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const HandyPTG_HPTGlandCard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandyPTG_HPTGlandCard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HandyPTG_HPTGlandCard_pargs {
 public:


  virtual ~HandyPTG_HPTGlandCard_pargs() throw() {}

  const std::string* abbreviation;
  const std::string* index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HandyPTG_HPTGdiscardCard_args__isset {
  _HandyPTG_HPTGdiscardCard_args__isset() : abbreviation(false), index(false) {}
  bool abbreviation;
  bool index;
} _HandyPTG_HPTGdiscardCard_args__isset;

class HandyPTG_HPTGdiscardCard_args {
 public:

  HandyPTG_HPTGdiscardCard_args() : abbreviation(""), index("") {
  }

  virtual ~HandyPTG_HPTGdiscardCard_args() throw() {}

  std::string abbreviation;
  std::string index;

  _HandyPTG_HPTGdiscardCard_args__isset __isset;

  bool operator == (const HandyPTG_HPTGdiscardCard_args & rhs) const
  {
    if (!(abbreviation == rhs.abbreviation))
      return false;
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const HandyPTG_HPTGdiscardCard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandyPTG_HPTGdiscardCard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HandyPTG_HPTGdiscardCard_pargs {
 public:


  virtual ~HandyPTG_HPTGdiscardCard_pargs() throw() {}

  const std::string* abbreviation;
  const std::string* index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HandyPTG_HPTGgetCard_args__isset {
  _HandyPTG_HPTGgetCard_args__isset() : abbreviation(false), index(false) {}
  bool abbreviation;
  bool index;
} _HandyPTG_HPTGgetCard_args__isset;

class HandyPTG_HPTGgetCard_args {
 public:

  HandyPTG_HPTGgetCard_args() : abbreviation(""), index("") {
  }

  virtual ~HandyPTG_HPTGgetCard_args() throw() {}

  std::string abbreviation;
  std::string index;

  _HandyPTG_HPTGgetCard_args__isset __isset;

  bool operator == (const HandyPTG_HPTGgetCard_args & rhs) const
  {
    if (!(abbreviation == rhs.abbreviation))
      return false;
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const HandyPTG_HPTGgetCard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandyPTG_HPTGgetCard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HandyPTG_HPTGgetCard_pargs {
 public:


  virtual ~HandyPTG_HPTGgetCard_pargs() throw() {}

  const std::string* abbreviation;
  const std::string* index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HandyPTG_HPTGgetCard_result__isset {
  _HandyPTG_HPTGgetCard_result__isset() : success(false) {}
  bool success;
} _HandyPTG_HPTGgetCard_result__isset;

class HandyPTG_HPTGgetCard_result {
 public:

  HandyPTG_HPTGgetCard_result() : success("") {
  }

  virtual ~HandyPTG_HPTGgetCard_result() throw() {}

  std::string success;

  _HandyPTG_HPTGgetCard_result__isset __isset;

  bool operator == (const HandyPTG_HPTGgetCard_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HandyPTG_HPTGgetCard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HandyPTG_HPTGgetCard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _HandyPTG_HPTGgetCard_presult__isset {
  _HandyPTG_HPTGgetCard_presult__isset() : success(false) {}
  bool success;
} _HandyPTG_HPTGgetCard_presult__isset;

class HandyPTG_HPTGgetCard_presult {
 public:


  virtual ~HandyPTG_HPTGgetCard_presult() throw() {}

  std::string* success;

  _HandyPTG_HPTGgetCard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class HandyPTGClient : virtual public HandyPTGIf {
 public:
  HandyPTGClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  HandyPTGClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void HPTGgetEvents(std::vector<HPTGEvent> & _return, const int32_t sinceIndex);
  void send_HPTGgetEvents(const int32_t sinceIndex);
  void recv_HPTGgetEvents(std::vector<HPTGEvent> & _return);
  void HPTGdrawCard();
  void send_HPTGdrawCard();
  void HPTGplayCard(const std::string& abbreviation, const std::string& index);
  void send_HPTGplayCard(const std::string& abbreviation, const std::string& index);
  void HPTGlandCard(const std::string& abbreviation, const std::string& index);
  void send_HPTGlandCard(const std::string& abbreviation, const std::string& index);
  void HPTGdiscardCard(const std::string& abbreviation, const std::string& index);
  void send_HPTGdiscardCard(const std::string& abbreviation, const std::string& index);
  void HPTGgetCard(std::string& _return, const std::string& abbreviation, const std::string& index);
  void send_HPTGgetCard(const std::string& abbreviation, const std::string& index);
  void recv_HPTGgetCard(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HandyPTGProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<HandyPTGIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (HandyPTGProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*)> processMap_;
  void process_HPTGgetEvents(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_HPTGdrawCard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_HPTGplayCard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_HPTGlandCard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_HPTGdiscardCard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_HPTGgetCard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
 public:
  HandyPTGProcessor(boost::shared_ptr<HandyPTGIf> iface) :
    iface_(iface) {
    processMap_["HPTGgetEvents"] = &HandyPTGProcessor::process_HPTGgetEvents;
    processMap_["HPTGdrawCard"] = &HandyPTGProcessor::process_HPTGdrawCard;
    processMap_["HPTGplayCard"] = &HandyPTGProcessor::process_HPTGplayCard;
    processMap_["HPTGlandCard"] = &HandyPTGProcessor::process_HPTGlandCard;
    processMap_["HPTGdiscardCard"] = &HandyPTGProcessor::process_HPTGdiscardCard;
    processMap_["HPTGgetCard"] = &HandyPTGProcessor::process_HPTGgetCard;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot);
  virtual ~HandyPTGProcessor() {}
};

class HandyPTGMultiface : virtual public HandyPTGIf {
 public:
  HandyPTGMultiface(std::vector<boost::shared_ptr<HandyPTGIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HandyPTGMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HandyPTGIf> > ifaces_;
  HandyPTGMultiface() {}
  void add(boost::shared_ptr<HandyPTGIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void HPTGgetEvents(std::vector<HPTGEvent> & _return, const int32_t sinceIndex) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->HPTGgetEvents(_return, sinceIndex);
        return;
      } else {
        ifaces_[i]->HPTGgetEvents(_return, sinceIndex);
      }
    }
  }

  void HPTGdrawCard() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->HPTGdrawCard();
    }
  }

  void HPTGplayCard(const std::string& abbreviation, const std::string& index) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->HPTGplayCard(abbreviation, index);
    }
  }

  void HPTGlandCard(const std::string& abbreviation, const std::string& index) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->HPTGlandCard(abbreviation, index);
    }
  }

  void HPTGdiscardCard(const std::string& abbreviation, const std::string& index) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->HPTGdiscardCard(abbreviation, index);
    }
  }

  void HPTGgetCard(std::string& _return, const std::string& abbreviation, const std::string& index) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->HPTGgetCard(_return, abbreviation, index);
        return;
      } else {
        ifaces_[i]->HPTGgetCard(_return, abbreviation, index);
      }
    }
  }

};



#endif
