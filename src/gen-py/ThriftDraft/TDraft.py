#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  """
  Event Format
  - type
    0: data[0]
    1: data[1]
    n: data[n]
    ...

  - expansionPassedTo
    0: expansion (string in format "abbreviation:index,abbreviation:index,..."
    1: newPlayer

  - setExpansions
    0: exp1
    1: exp2
    2: exp3
    n: expn (if I really missed something)

  - draftStarted
  """
  def DsetUpDraft(self, draftID, playersExpected, packNames):
    """
    Parameters:
     - draftID
     - playersExpected
     - packNames
    """
    pass

  def DregisterPlayer(self, draftID, playerName):
    """
    Parameters:
     - draftID
     - playerName
    """
    pass

  def DunregisterPlayer(self, draftID, playerID):
    """
    Parameters:
     - draftID
     - playerID
    """
    pass

  def DgetAllCards(self, draftID):
    """
    Parameters:
     - draftID
    """
    pass

  def DsignalReady(self, draftID, playerID):
    """
    Parameters:
     - draftID
     - playerID
    """
    pass

  def DeveryoneReady(self, draftID):
    """
    Parameters:
     - draftID
    """
    pass

  def DgetCurrentPack(self, draftID, playerID):
    """
    Parameters:
     - draftID
     - playerID
    """
    pass

  def DpickCard(self, draftID, playerID, card):
    """
    Parameters:
     - draftID
     - playerID
     - card
    """
    pass


class Client(Iface):
  """
  Event Format
  - type
    0: data[0]
    1: data[1]
    n: data[n]
    ...

  - expansionPassedTo
    0: expansion (string in format "abbreviation:index,abbreviation:index,..."
    1: newPlayer

  - setExpansions
    0: exp1
    1: exp2
    2: exp3
    n: expn (if I really missed something)

  - draftStarted
  """
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def DsetUpDraft(self, draftID, playersExpected, packNames):
    """
    Parameters:
     - draftID
     - playersExpected
     - packNames
    """
    self.send_DsetUpDraft(draftID, playersExpected, packNames)

  def send_DsetUpDraft(self, draftID, playersExpected, packNames):
    self._oprot.writeMessageBegin('DsetUpDraft', TMessageType.CALL, self._seqid)
    args = DsetUpDraft_args()
    args.draftID = draftID
    args.playersExpected = playersExpected
    args.packNames = packNames
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def DregisterPlayer(self, draftID, playerName):
    """
    Parameters:
     - draftID
     - playerName
    """
    self.send_DregisterPlayer(draftID, playerName)
    return self.recv_DregisterPlayer()

  def send_DregisterPlayer(self, draftID, playerName):
    self._oprot.writeMessageBegin('DregisterPlayer', TMessageType.CALL, self._seqid)
    args = DregisterPlayer_args()
    args.draftID = draftID
    args.playerName = playerName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_DregisterPlayer(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = DregisterPlayer_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "DregisterPlayer failed: unknown result");

  def DunregisterPlayer(self, draftID, playerID):
    """
    Parameters:
     - draftID
     - playerID
    """
    self.send_DunregisterPlayer(draftID, playerID)

  def send_DunregisterPlayer(self, draftID, playerID):
    self._oprot.writeMessageBegin('DunregisterPlayer', TMessageType.CALL, self._seqid)
    args = DunregisterPlayer_args()
    args.draftID = draftID
    args.playerID = playerID
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def DgetAllCards(self, draftID):
    """
    Parameters:
     - draftID
    """
    self.send_DgetAllCards(draftID)
    return self.recv_DgetAllCards()

  def send_DgetAllCards(self, draftID):
    self._oprot.writeMessageBegin('DgetAllCards', TMessageType.CALL, self._seqid)
    args = DgetAllCards_args()
    args.draftID = draftID
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_DgetAllCards(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = DgetAllCards_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "DgetAllCards failed: unknown result");

  def DsignalReady(self, draftID, playerID):
    """
    Parameters:
     - draftID
     - playerID
    """
    self.send_DsignalReady(draftID, playerID)

  def send_DsignalReady(self, draftID, playerID):
    self._oprot.writeMessageBegin('DsignalReady', TMessageType.CALL, self._seqid)
    args = DsignalReady_args()
    args.draftID = draftID
    args.playerID = playerID
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def DeveryoneReady(self, draftID):
    """
    Parameters:
     - draftID
    """
    self.send_DeveryoneReady(draftID)
    return self.recv_DeveryoneReady()

  def send_DeveryoneReady(self, draftID):
    self._oprot.writeMessageBegin('DeveryoneReady', TMessageType.CALL, self._seqid)
    args = DeveryoneReady_args()
    args.draftID = draftID
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_DeveryoneReady(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = DeveryoneReady_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "DeveryoneReady failed: unknown result");

  def DgetCurrentPack(self, draftID, playerID):
    """
    Parameters:
     - draftID
     - playerID
    """
    self.send_DgetCurrentPack(draftID, playerID)
    return self.recv_DgetCurrentPack()

  def send_DgetCurrentPack(self, draftID, playerID):
    self._oprot.writeMessageBegin('DgetCurrentPack', TMessageType.CALL, self._seqid)
    args = DgetCurrentPack_args()
    args.draftID = draftID
    args.playerID = playerID
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_DgetCurrentPack(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = DgetCurrentPack_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "DgetCurrentPack failed: unknown result");

  def DpickCard(self, draftID, playerID, card):
    """
    Parameters:
     - draftID
     - playerID
     - card
    """
    self.send_DpickCard(draftID, playerID, card)

  def send_DpickCard(self, draftID, playerID, card):
    self._oprot.writeMessageBegin('DpickCard', TMessageType.CALL, self._seqid)
    args = DpickCard_args()
    args.draftID = draftID
    args.playerID = playerID
    args.card = card
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["DsetUpDraft"] = Processor.process_DsetUpDraft
    self._processMap["DregisterPlayer"] = Processor.process_DregisterPlayer
    self._processMap["DunregisterPlayer"] = Processor.process_DunregisterPlayer
    self._processMap["DgetAllCards"] = Processor.process_DgetAllCards
    self._processMap["DsignalReady"] = Processor.process_DsignalReady
    self._processMap["DeveryoneReady"] = Processor.process_DeveryoneReady
    self._processMap["DgetCurrentPack"] = Processor.process_DgetCurrentPack
    self._processMap["DpickCard"] = Processor.process_DpickCard

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_DsetUpDraft(self, seqid, iprot, oprot):
    args = DsetUpDraft_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.DsetUpDraft(args.draftID, args.playersExpected, args.packNames)
    return

  def process_DregisterPlayer(self, seqid, iprot, oprot):
    args = DregisterPlayer_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = DregisterPlayer_result()
    result.success = self._handler.DregisterPlayer(args.draftID, args.playerName)
    oprot.writeMessageBegin("DregisterPlayer", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_DunregisterPlayer(self, seqid, iprot, oprot):
    args = DunregisterPlayer_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.DunregisterPlayer(args.draftID, args.playerID)
    return

  def process_DgetAllCards(self, seqid, iprot, oprot):
    args = DgetAllCards_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = DgetAllCards_result()
    result.success = self._handler.DgetAllCards(args.draftID)
    oprot.writeMessageBegin("DgetAllCards", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_DsignalReady(self, seqid, iprot, oprot):
    args = DsignalReady_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.DsignalReady(args.draftID, args.playerID)
    return

  def process_DeveryoneReady(self, seqid, iprot, oprot):
    args = DeveryoneReady_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = DeveryoneReady_result()
    result.success = self._handler.DeveryoneReady(args.draftID)
    oprot.writeMessageBegin("DeveryoneReady", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_DgetCurrentPack(self, seqid, iprot, oprot):
    args = DgetCurrentPack_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = DgetCurrentPack_result()
    result.success = self._handler.DgetCurrentPack(args.draftID, args.playerID)
    oprot.writeMessageBegin("DgetCurrentPack", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_DpickCard(self, seqid, iprot, oprot):
    args = DpickCard_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.DpickCard(args.draftID, args.playerID, args.card)
    return


# HELPER FUNCTIONS AND STRUCTURES

class DsetUpDraft_args:
  """
  Attributes:
   - draftID
   - playersExpected
   - packNames
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'draftID', None, None, ), # 1
    (2, TType.I32, 'playersExpected', None, None, ), # 2
    (3, TType.LIST, 'packNames', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, draftID=None, playersExpected=None, packNames=None,):
    self.draftID = draftID
    self.playersExpected = playersExpected
    self.packNames = packNames

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.draftID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.playersExpected = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.packNames = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.packNames.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DsetUpDraft_args')
    if self.draftID is not None:
      oprot.writeFieldBegin('draftID', TType.I32, 1)
      oprot.writeI32(self.draftID)
      oprot.writeFieldEnd()
    if self.playersExpected is not None:
      oprot.writeFieldBegin('playersExpected', TType.I32, 2)
      oprot.writeI32(self.playersExpected)
      oprot.writeFieldEnd()
    if self.packNames is not None:
      oprot.writeFieldBegin('packNames', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.packNames))
      for iter6 in self.packNames:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DregisterPlayer_args:
  """
  Attributes:
   - draftID
   - playerName
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'draftID', None, None, ), # 1
    (2, TType.STRING, 'playerName', None, None, ), # 2
  )

  def __init__(self, draftID=None, playerName=None,):
    self.draftID = draftID
    self.playerName = playerName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.draftID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.playerName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DregisterPlayer_args')
    if self.draftID is not None:
      oprot.writeFieldBegin('draftID', TType.I32, 1)
      oprot.writeI32(self.draftID)
      oprot.writeFieldEnd()
    if self.playerName is not None:
      oprot.writeFieldBegin('playerName', TType.STRING, 2)
      oprot.writeString(self.playerName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DregisterPlayer_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DregisterPlayer_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DunregisterPlayer_args:
  """
  Attributes:
   - draftID
   - playerID
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'draftID', None, None, ), # 1
    (2, TType.I32, 'playerID', None, None, ), # 2
  )

  def __init__(self, draftID=None, playerID=None,):
    self.draftID = draftID
    self.playerID = playerID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.draftID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.playerID = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DunregisterPlayer_args')
    if self.draftID is not None:
      oprot.writeFieldBegin('draftID', TType.I32, 1)
      oprot.writeI32(self.draftID)
      oprot.writeFieldEnd()
    if self.playerID is not None:
      oprot.writeFieldBegin('playerID', TType.I32, 2)
      oprot.writeI32(self.playerID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DgetAllCards_args:
  """
  Attributes:
   - draftID
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'draftID', None, None, ), # 1
  )

  def __init__(self, draftID=None,):
    self.draftID = draftID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.draftID = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DgetAllCards_args')
    if self.draftID is not None:
      oprot.writeFieldBegin('draftID', TType.I32, 1)
      oprot.writeI32(self.draftID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DgetAllCards_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString();
            self.success.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DgetAllCards_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter13 in self.success:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DsignalReady_args:
  """
  Attributes:
   - draftID
   - playerID
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'draftID', None, None, ), # 1
    (2, TType.I32, 'playerID', None, None, ), # 2
  )

  def __init__(self, draftID=None, playerID=None,):
    self.draftID = draftID
    self.playerID = playerID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.draftID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.playerID = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DsignalReady_args')
    if self.draftID is not None:
      oprot.writeFieldBegin('draftID', TType.I32, 1)
      oprot.writeI32(self.draftID)
      oprot.writeFieldEnd()
    if self.playerID is not None:
      oprot.writeFieldBegin('playerID', TType.I32, 2)
      oprot.writeI32(self.playerID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DeveryoneReady_args:
  """
  Attributes:
   - draftID
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'draftID', None, None, ), # 1
  )

  def __init__(self, draftID=None,):
    self.draftID = draftID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.draftID = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DeveryoneReady_args')
    if self.draftID is not None:
      oprot.writeFieldBegin('draftID', TType.I32, 1)
      oprot.writeI32(self.draftID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DeveryoneReady_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DeveryoneReady_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DgetCurrentPack_args:
  """
  Attributes:
   - draftID
   - playerID
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'draftID', None, None, ), # 1
    (2, TType.I32, 'playerID', None, None, ), # 2
  )

  def __init__(self, draftID=None, playerID=None,):
    self.draftID = draftID
    self.playerID = playerID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.draftID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.playerID = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DgetCurrentPack_args')
    if self.draftID is not None:
      oprot.writeFieldBegin('draftID', TType.I32, 1)
      oprot.writeI32(self.draftID)
      oprot.writeFieldEnd()
    if self.playerID is not None:
      oprot.writeFieldBegin('playerID', TType.I32, 2)
      oprot.writeI32(self.playerID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DgetCurrentPack_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readString();
            self.success.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DgetCurrentPack_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter20 in self.success:
        oprot.writeString(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DpickCard_args:
  """
  Attributes:
   - draftID
   - playerID
   - card
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'draftID', None, None, ), # 1
    (2, TType.I32, 'playerID', None, None, ), # 2
    (3, TType.STRING, 'card', None, None, ), # 3
  )

  def __init__(self, draftID=None, playerID=None, card=None,):
    self.draftID = draftID
    self.playerID = playerID
    self.card = card

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.draftID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.playerID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.card = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DpickCard_args')
    if self.draftID is not None:
      oprot.writeFieldBegin('draftID', TType.I32, 1)
      oprot.writeI32(self.draftID)
      oprot.writeFieldEnd()
    if self.playerID is not None:
      oprot.writeFieldBegin('playerID', TType.I32, 2)
      oprot.writeI32(self.playerID)
      oprot.writeFieldEnd()
    if self.card is not None:
      oprot.writeFieldBegin('card', TType.STRING, 3)
      oprot.writeString(self.card)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
