#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import PTG
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i32 registerPlayer(i32 gameID, string playerName, i32 team)'
  print '  void unregisterPlayer(i32 gameID, i32 playerID)'
  print '  void setDeck(i32 gameID, i32 playerID, string deckName, i32 deckSize)'
  print '  void moveCard(i32 gameID, i32 playerID, string abbreviation, string index, i32 originalPosition, i32 newPosition, bool tapped)'
  print '  void removeCardFrom(i32 gameID, i32 playerID, i32 zone, i32 position)'
  print '  void addCardTo(i32 gameID, i32 playerID, string cardString, i32 zone, i32 position)'
  print '  void setCardTo(i32 gameID, i32 playerID, string cardString, i32 zone, i32 position)'
  print '  void setLife(i32 gameID, i32 playerID, i32 life)'
  print '  void setPoison(i32 gameID, i32 playerID, i32 posion)'
  print '  void reveal(i32 gameID, i32 playerID, string abbreviation, string index)'
  print '  void event(string eventType, i32 gameID, i32 playerID,  data)'
  print '   getEvents(i32 gameID, i32 sinceIndex)'
  print '   listDecks(string directory)'
  print '  string getDeck(string directory, string deckName)'
  print '  void saveDeck(string deckName, string deck, string directory)'
  print '  string VERSION()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = PTG.Client(protocol)
transport.open()

if cmd == 'registerPlayer':
  if len(args) != 3:
    print 'registerPlayer requires 3 args'
    sys.exit(1)
  pp.pprint(client.registerPlayer(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'unregisterPlayer':
  if len(args) != 2:
    print 'unregisterPlayer requires 2 args'
    sys.exit(1)
  pp.pprint(client.unregisterPlayer(eval(args[0]),eval(args[1]),))

elif cmd == 'setDeck':
  if len(args) != 4:
    print 'setDeck requires 4 args'
    sys.exit(1)
  pp.pprint(client.setDeck(eval(args[0]),eval(args[1]),args[2],eval(args[3]),))

elif cmd == 'moveCard':
  if len(args) != 7:
    print 'moveCard requires 7 args'
    sys.exit(1)
  pp.pprint(client.moveCard(eval(args[0]),eval(args[1]),args[2],args[3],eval(args[4]),eval(args[5]),eval(args[6]),))

elif cmd == 'removeCardFrom':
  if len(args) != 4:
    print 'removeCardFrom requires 4 args'
    sys.exit(1)
  pp.pprint(client.removeCardFrom(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'addCardTo':
  if len(args) != 5:
    print 'addCardTo requires 5 args'
    sys.exit(1)
  pp.pprint(client.addCardTo(eval(args[0]),eval(args[1]),args[2],eval(args[3]),eval(args[4]),))

elif cmd == 'setCardTo':
  if len(args) != 5:
    print 'setCardTo requires 5 args'
    sys.exit(1)
  pp.pprint(client.setCardTo(eval(args[0]),eval(args[1]),args[2],eval(args[3]),eval(args[4]),))

elif cmd == 'setLife':
  if len(args) != 3:
    print 'setLife requires 3 args'
    sys.exit(1)
  pp.pprint(client.setLife(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'setPoison':
  if len(args) != 3:
    print 'setPoison requires 3 args'
    sys.exit(1)
  pp.pprint(client.setPoison(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'reveal':
  if len(args) != 4:
    print 'reveal requires 4 args'
    sys.exit(1)
  pp.pprint(client.reveal(eval(args[0]),eval(args[1]),args[2],args[3],))

elif cmd == 'event':
  if len(args) != 4:
    print 'event requires 4 args'
    sys.exit(1)
  pp.pprint(client.event(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'getEvents':
  if len(args) != 2:
    print 'getEvents requires 2 args'
    sys.exit(1)
  pp.pprint(client.getEvents(eval(args[0]),eval(args[1]),))

elif cmd == 'listDecks':
  if len(args) != 1:
    print 'listDecks requires 1 args'
    sys.exit(1)
  pp.pprint(client.listDecks(args[0],))

elif cmd == 'getDeck':
  if len(args) != 2:
    print 'getDeck requires 2 args'
    sys.exit(1)
  pp.pprint(client.getDeck(args[0],args[1],))

elif cmd == 'saveDeck':
  if len(args) != 3:
    print 'saveDeck requires 3 args'
    sys.exit(1)
  pp.pprint(client.saveDeck(args[0],args[1],args[2],))

elif cmd == 'VERSION':
  if len(args) != 0:
    print 'VERSION requires 0 args'
    sys.exit(1)
  pp.pprint(client.VERSION())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
