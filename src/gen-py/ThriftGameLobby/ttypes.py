#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class GLEvent:
  """
  Event Format
  - type
    0: data[0]
    1: data[1]
    ...

  - addGame
    0: gameID    (you can then look up the game itself)

  - gameStarted  (the game stays in the lobby so that players can rejoin)
    0: gameID

  - removeGame
    0: gameID

  - addPlayer
    1: playerName

  - removePlayer

  - playerJoinedGame
    0: gameID    (sender is player that joined)

  - playerLeftGame
    0: gameID    (so that gameLobby can adjust the players-in-game number appropriately)

  - expansionPassedTo
    0: expansion (string in format "abbreviation:index,abbreviation:index,..."
    1: newPlayer
    2: gameID


  Attributes:
   - index
   - type
   - sender
   - data
   - senderName
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'index', None, None, ), # 1
    (2, TType.STRING, 'type', None, None, ), # 2
    (3, TType.I32, 'sender', None, None, ), # 3
    (4, TType.LIST, 'data', (TType.STRING,None), None, ), # 4
    (5, TType.STRING, 'senderName', None, None, ), # 5
  )

  def __init__(self, index=None, type=None, sender=None, data=None, senderName=None,):
    self.index = index
    self.type = type
    self.sender = sender
    self.data = data
    self.senderName = senderName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.index = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sender = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.data = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.data.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.senderName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GLEvent')
    if self.index is not None:
      oprot.writeFieldBegin('index', TType.I32, 1)
      oprot.writeI32(self.index)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 2)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.sender is not None:
      oprot.writeFieldBegin('sender', TType.I32, 3)
      oprot.writeI32(self.sender)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.data))
      for iter6 in self.data:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.senderName is not None:
      oprot.writeFieldBegin('senderName', TType.STRING, 5)
      oprot.writeString(self.senderName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GLPlayer:
  """
  Attributes:
   - playerID
   - playerName
   - currentGameID
   - team
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'playerID', None, None, ), # 1
    (2, TType.STRING, 'playerName', None, None, ), # 2
    (3, TType.I32, 'currentGameID', None, None, ), # 3
    (4, TType.I32, 'team', None, None, ), # 4
  )

  def __init__(self, playerID=None, playerName=None, currentGameID=None, team=None,):
    self.playerID = playerID
    self.playerName = playerName
    self.currentGameID = currentGameID
    self.team = team

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.playerID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.playerName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.currentGameID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.team = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GLPlayer')
    if self.playerID is not None:
      oprot.writeFieldBegin('playerID', TType.I32, 1)
      oprot.writeI32(self.playerID)
      oprot.writeFieldEnd()
    if self.playerName is not None:
      oprot.writeFieldBegin('playerName', TType.STRING, 2)
      oprot.writeString(self.playerName)
      oprot.writeFieldEnd()
    if self.currentGameID is not None:
      oprot.writeFieldBegin('currentGameID', TType.I32, 3)
      oprot.writeI32(self.currentGameID)
      oprot.writeFieldEnd()
    if self.team is not None:
      oprot.writeFieldBegin('team', TType.I32, 4)
      oprot.writeI32(self.team)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GLGame:
  """
  Attributes:
   - gameID
   - name
   - owner
   - players
   - type
   - expansions
   - started
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'gameID', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'owner', None, None, ), # 3
    (4, TType.LIST, 'players', (TType.STRUCT,(GLPlayer, GLPlayer.thrift_spec)), None, ), # 4
    (5, TType.STRING, 'type', None, None, ), # 5
    (6, TType.LIST, 'expansions', (TType.STRING,None), None, ), # 6
    (7, TType.BOOL, 'started', None, None, ), # 7
  )

  def __init__(self, gameID=None, name=None, owner=None, players=None, type=None, expansions=None, started=None,):
    self.gameID = gameID
    self.name = name
    self.owner = owner
    self.players = players
    self.type = type
    self.expansions = expansions
    self.started = started

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.gameID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.owner = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.players = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = GLPlayer()
            _elem12.read(iprot)
            self.players.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.expansions = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = iprot.readString();
            self.expansions.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.started = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GLGame')
    if self.gameID is not None:
      oprot.writeFieldBegin('gameID', TType.I32, 1)
      oprot.writeI32(self.gameID)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.owner is not None:
      oprot.writeFieldBegin('owner', TType.I32, 3)
      oprot.writeI32(self.owner)
      oprot.writeFieldEnd()
    if self.players is not None:
      oprot.writeFieldBegin('players', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.players))
      for iter19 in self.players:
        iter19.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 5)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.expansions is not None:
      oprot.writeFieldBegin('expansions', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.expansions))
      for iter20 in self.expansions:
        oprot.writeString(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.started is not None:
      oprot.writeFieldBegin('started', TType.BOOL, 7)
      oprot.writeBool(self.started)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
