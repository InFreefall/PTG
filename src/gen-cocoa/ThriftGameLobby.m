/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"


#import "ThriftGameLobby.h"

@implementation GLEvent

- (id) initWithIndex: (int32_t) index type: (NSString *) type sender: (int32_t) sender data: (NSArray *) data senderName: (NSString *) senderName
{
  self = [super init];
  __index = index;
  __index_isset = YES;
  __type = [type retain];
  __type_isset = YES;
  __sender = sender;
  __sender_isset = YES;
  __data = [data retain];
  __data_isset = YES;
  __senderName = [senderName retain];
  __senderName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"index"])
  {
    __index = [decoder decodeInt32ForKey: @"index"];
    __index_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [[decoder decodeObjectForKey: @"type"] retain];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"sender"])
  {
    __sender = [decoder decodeInt32ForKey: @"sender"];
    __sender_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain];
    __data_isset = YES;
  }
  if ([decoder containsValueForKey: @"senderName"])
  {
    __senderName = [[decoder decodeObjectForKey: @"senderName"] retain];
    __senderName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__index_isset)
  {
    [encoder encodeInt32: __index forKey: @"index"];
  }
  if (__type_isset)
  {
    [encoder encodeObject: __type forKey: @"type"];
  }
  if (__sender_isset)
  {
    [encoder encodeInt32: __sender forKey: @"sender"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
  if (__senderName_isset)
  {
    [encoder encodeObject: __senderName forKey: @"senderName"];
  }
}

- (void) dealloc
{
  [__type release];
  [__data release];
  [__senderName release];
  [super dealloc];
}

- (int32_t) index {
  return __index;
}

- (void) setIndex: (int32_t) index {
  __index = index;
  __index_isset = YES;
}

- (BOOL) indexIsSet {
  return __index_isset;
}

- (void) unsetIndex {
  __index_isset = NO;
}

- (NSString *) type {
  return [[__type retain] autorelease];
}

- (void) setType: (NSString *) type {
  [type retain];
  [__type release];
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  [__type release];
  __type = nil;
  __type_isset = NO;
}

- (int32_t) sender {
  return __sender;
}

- (void) setSender: (int32_t) sender {
  __sender = sender;
  __sender_isset = YES;
}

- (BOOL) senderIsSet {
  return __sender_isset;
}

- (void) unsetSender {
  __sender_isset = NO;
}

- (NSArray *) data {
  return [[__data retain] autorelease];
}

- (void) setData: (NSArray *) data {
  [data retain];
  [__data release];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release];
  __data = nil;
  __data_isset = NO;
}

- (NSString *) senderName {
  return [[__senderName retain] autorelease];
}

- (void) setSenderName: (NSString *) senderName {
  [senderName retain];
  [__senderName release];
  __senderName = senderName;
  __senderName_isset = YES;
}

- (BOOL) senderNameIsSet {
  return __senderName_isset;
}

- (void) unsetSenderName {
  [__senderName release];
  __senderName = nil;
  __senderName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIndex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setData: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSenderName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLEvent"];
  if (__index_isset) {
    [outProtocol writeFieldBeginWithName: @"index" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __index];
    [outProtocol writeFieldEnd];
  }
  if (__type_isset) {
    if (__type != nil) {
      [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sender_isset) {
    [outProtocol writeFieldBeginWithName: @"sender" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __sender];
    [outProtocol writeFieldEnd];
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__data count]];
        int i4;
        for (i4 = 0; i4 < [__data count]; i4++)
        {
          [outProtocol writeString: [__data objectAtIndex: i4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__senderName_isset) {
    if (__senderName != nil) {
      [outProtocol writeFieldBeginWithName: @"senderName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __senderName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLEvent("];
  [ms appendString: @"index:"];
  [ms appendFormat: @"%i", __index];
  [ms appendString: @",type:"];
  [ms appendFormat: @"\"%@\"", __type];
  [ms appendString: @",sender:"];
  [ms appendFormat: @"%i", __sender];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @",senderName:"];
  [ms appendFormat: @"\"%@\"", __senderName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GLPlayer

- (id) initWithPlayerID: (int32_t) playerID playerName: (NSString *) playerName currentGameID: (int32_t) currentGameID team: (int32_t) team
{
  self = [super init];
  __playerID = playerID;
  __playerID_isset = YES;
  __playerName = [playerName retain];
  __playerName_isset = YES;
  __currentGameID = currentGameID;
  __currentGameID_isset = YES;
  __team = team;
  __team_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"playerID"])
  {
    __playerID = [decoder decodeInt32ForKey: @"playerID"];
    __playerID_isset = YES;
  }
  if ([decoder containsValueForKey: @"playerName"])
  {
    __playerName = [[decoder decodeObjectForKey: @"playerName"] retain];
    __playerName_isset = YES;
  }
  if ([decoder containsValueForKey: @"currentGameID"])
  {
    __currentGameID = [decoder decodeInt32ForKey: @"currentGameID"];
    __currentGameID_isset = YES;
  }
  if ([decoder containsValueForKey: @"team"])
  {
    __team = [decoder decodeInt32ForKey: @"team"];
    __team_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__playerID_isset)
  {
    [encoder encodeInt32: __playerID forKey: @"playerID"];
  }
  if (__playerName_isset)
  {
    [encoder encodeObject: __playerName forKey: @"playerName"];
  }
  if (__currentGameID_isset)
  {
    [encoder encodeInt32: __currentGameID forKey: @"currentGameID"];
  }
  if (__team_isset)
  {
    [encoder encodeInt32: __team forKey: @"team"];
  }
}

- (void) dealloc
{
  [__playerName release];
  [super dealloc];
}

- (int32_t) playerID {
  return __playerID;
}

- (void) setPlayerID: (int32_t) playerID {
  __playerID = playerID;
  __playerID_isset = YES;
}

- (BOOL) playerIDIsSet {
  return __playerID_isset;
}

- (void) unsetPlayerID {
  __playerID_isset = NO;
}

- (NSString *) playerName {
  return [[__playerName retain] autorelease];
}

- (void) setPlayerName: (NSString *) playerName {
  [playerName retain];
  [__playerName release];
  __playerName = playerName;
  __playerName_isset = YES;
}

- (BOOL) playerNameIsSet {
  return __playerName_isset;
}

- (void) unsetPlayerName {
  [__playerName release];
  __playerName = nil;
  __playerName_isset = NO;
}

- (int32_t) currentGameID {
  return __currentGameID;
}

- (void) setCurrentGameID: (int32_t) currentGameID {
  __currentGameID = currentGameID;
  __currentGameID_isset = YES;
}

- (BOOL) currentGameIDIsSet {
  return __currentGameID_isset;
}

- (void) unsetCurrentGameID {
  __currentGameID_isset = NO;
}

- (int32_t) team {
  return __team;
}

- (void) setTeam: (int32_t) team {
  __team = team;
  __team_isset = YES;
}

- (BOOL) teamIsSet {
  return __team_isset;
}

- (void) unsetTeam {
  __team_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPlayerID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPlayerName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCurrentGameID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTeam: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLPlayer"];
  if (__playerID_isset) {
    [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __playerID];
    [outProtocol writeFieldEnd];
  }
  if (__playerName_isset) {
    if (__playerName != nil) {
      [outProtocol writeFieldBeginWithName: @"playerName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __playerName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__currentGameID_isset) {
    [outProtocol writeFieldBeginWithName: @"currentGameID" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __currentGameID];
    [outProtocol writeFieldEnd];
  }
  if (__team_isset) {
    [outProtocol writeFieldBeginWithName: @"team" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __team];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLPlayer("];
  [ms appendString: @"playerID:"];
  [ms appendFormat: @"%i", __playerID];
  [ms appendString: @",playerName:"];
  [ms appendFormat: @"\"%@\"", __playerName];
  [ms appendString: @",currentGameID:"];
  [ms appendFormat: @"%i", __currentGameID];
  [ms appendString: @",team:"];
  [ms appendFormat: @"%i", __team];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GLGame

- (id) initWithGameID: (int32_t) gameID name: (NSString *) name owner: (int32_t) owner players: (NSArray *) players type: (NSString *) type expansions: (NSArray *) expansions
{
  self = [super init];
  __gameID = gameID;
  __gameID_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  __owner = owner;
  __owner_isset = YES;
  __players = [players retain];
  __players_isset = YES;
  __type = [type retain];
  __type_isset = YES;
  __expansions = [expansions retain];
  __expansions_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gameID"])
  {
    __gameID = [decoder decodeInt32ForKey: @"gameID"];
    __gameID_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"owner"])
  {
    __owner = [decoder decodeInt32ForKey: @"owner"];
    __owner_isset = YES;
  }
  if ([decoder containsValueForKey: @"players"])
  {
    __players = [[decoder decodeObjectForKey: @"players"] retain];
    __players_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [[decoder decodeObjectForKey: @"type"] retain];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"expansions"])
  {
    __expansions = [[decoder decodeObjectForKey: @"expansions"] retain];
    __expansions_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gameID_isset)
  {
    [encoder encodeInt32: __gameID forKey: @"gameID"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__owner_isset)
  {
    [encoder encodeInt32: __owner forKey: @"owner"];
  }
  if (__players_isset)
  {
    [encoder encodeObject: __players forKey: @"players"];
  }
  if (__type_isset)
  {
    [encoder encodeObject: __type forKey: @"type"];
  }
  if (__expansions_isset)
  {
    [encoder encodeObject: __expansions forKey: @"expansions"];
  }
}

- (void) dealloc
{
  [__name release];
  [__players release];
  [__type release];
  [__expansions release];
  [super dealloc];
}

- (int32_t) gameID {
  return __gameID;
}

- (void) setGameID: (int32_t) gameID {
  __gameID = gameID;
  __gameID_isset = YES;
}

- (BOOL) gameIDIsSet {
  return __gameID_isset;
}

- (void) unsetGameID {
  __gameID_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (int32_t) owner {
  return __owner;
}

- (void) setOwner: (int32_t) owner {
  __owner = owner;
  __owner_isset = YES;
}

- (BOOL) ownerIsSet {
  return __owner_isset;
}

- (void) unsetOwner {
  __owner_isset = NO;
}

- (NSArray *) players {
  return [[__players retain] autorelease];
}

- (void) setPlayers: (NSArray *) players {
  [players retain];
  [__players release];
  __players = players;
  __players_isset = YES;
}

- (BOOL) playersIsSet {
  return __players_isset;
}

- (void) unsetPlayers {
  [__players release];
  __players = nil;
  __players_isset = NO;
}

- (NSString *) type {
  return [[__type retain] autorelease];
}

- (void) setType: (NSString *) type {
  [type retain];
  [__type release];
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  [__type release];
  __type = nil;
  __type_isset = NO;
}

- (NSArray *) expansions {
  return [[__expansions retain] autorelease];
}

- (void) setExpansions: (NSArray *) expansions {
  [expansions retain];
  [__expansions release];
  __expansions = expansions;
  __expansions_isset = YES;
}

- (BOOL) expansionsIsSet {
  return __expansions_isset;
}

- (void) unsetExpansions {
  [__expansions release];
  __expansions = nil;
  __expansions_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGameID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOwner: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            GLPlayer *_elem7 = [[GLPlayer alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release];
          }
          [inProtocol readListEnd];
          [self setPlayers: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_LIST) {
          int _size8;
          [inProtocol readListBeginReturningElementType: NULL size: &_size8];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size8];
          int _i9;
          for (_i9 = 0; _i9 < _size8; ++_i9)
          {
            NSString * _elem10 = [inProtocol readString];
            [fieldValue addObject: _elem10];
          }
          [inProtocol readListEnd];
          [self setExpansions: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLGame"];
  if (__gameID_isset) {
    [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __gameID];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__owner_isset) {
    [outProtocol writeFieldBeginWithName: @"owner" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __owner];
    [outProtocol writeFieldEnd];
  }
  if (__players_isset) {
    if (__players != nil) {
      [outProtocol writeFieldBeginWithName: @"players" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__players count]];
        int i12;
        for (i12 = 0; i12 < [__players count]; i12++)
        {
          [[__players objectAtIndex: i12] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    if (__type != nil) {
      [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__expansions_isset) {
    if (__expansions != nil) {
      [outProtocol writeFieldBeginWithName: @"expansions" type: TType_LIST fieldID: 6];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__expansions count]];
        int i14;
        for (i14 = 0; i14 < [__expansions count]; i14++)
        {
          [outProtocol writeString: [__expansions objectAtIndex: i14]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLGame("];
  [ms appendString: @"gameID:"];
  [ms appendFormat: @"%i", __gameID];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",owner:"];
  [ms appendFormat: @"%i", __owner];
  [ms appendString: @",players:"];
  [ms appendFormat: @"%@", __players];
  [ms appendString: @",type:"];
  [ms appendFormat: @"\"%@\"", __type];
  [ms appendString: @",expansions:"];
  [ms appendFormat: @"%@", __expansions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation ThriftGameLobbyConstants
+ (void) initialize {
}
@end

@interface GLregisterPlayer_args : NSObject <NSCoding> {
  NSString * __playerName;

  BOOL __playerName_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=playerName, setter=setPlayerName:) NSString * playerName;
#endif

- (id) initWithPlayerName: (NSString *) playerName;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) playerName;
- (void) setPlayerName: (NSString *) playerName;
- (BOOL) playerNameIsSet;

@end

@implementation GLregisterPlayer_args

- (id) initWithPlayerName: (NSString *) playerName
{
  self = [super init];
  __playerName = [playerName retain];
  __playerName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"playerName"])
  {
    __playerName = [[decoder decodeObjectForKey: @"playerName"] retain];
    __playerName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__playerName_isset)
  {
    [encoder encodeObject: __playerName forKey: @"playerName"];
  }
}

- (void) dealloc
{
  [__playerName release];
  [super dealloc];
}

- (NSString *) playerName {
  return [[__playerName retain] autorelease];
}

- (void) setPlayerName: (NSString *) playerName {
  [playerName retain];
  [__playerName release];
  __playerName = playerName;
  __playerName_isset = YES;
}

- (BOOL) playerNameIsSet {
  return __playerName_isset;
}

- (void) unsetPlayerName {
  [__playerName release];
  __playerName = nil;
  __playerName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPlayerName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLregisterPlayer_args"];
  if (__playerName_isset) {
    if (__playerName != nil) {
      [outProtocol writeFieldBeginWithName: @"playerName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __playerName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLregisterPlayer_args("];
  [ms appendString: @"playerName:"];
  [ms appendFormat: @"\"%@\"", __playerName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLregisterPlayer_result : NSObject <NSCoding> {
  int32_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
#endif

- (id) initWithSuccess: (int32_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) success;
- (void) setSuccess: (int32_t) success;
- (BOOL) successIsSet;

@end

@implementation GLregisterPlayer_result

- (id) initWithSuccess: (int32_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt32ForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt32: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) success {
  return __success;
}

- (void) setSuccess: (int32_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLregisterPlayer_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLregisterPlayer_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLunregisterPlayer_args : NSObject <NSCoding> {
  int32_t __playerID;

  BOOL __playerID_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=playerID, setter=setPlayerID:) int32_t playerID;
#endif

- (id) initWithPlayerID: (int32_t) playerID;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) playerID;
- (void) setPlayerID: (int32_t) playerID;
- (BOOL) playerIDIsSet;

@end

@implementation GLunregisterPlayer_args

- (id) initWithPlayerID: (int32_t) playerID
{
  self = [super init];
  __playerID = playerID;
  __playerID_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"playerID"])
  {
    __playerID = [decoder decodeInt32ForKey: @"playerID"];
    __playerID_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__playerID_isset)
  {
    [encoder encodeInt32: __playerID forKey: @"playerID"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) playerID {
  return __playerID;
}

- (void) setPlayerID: (int32_t) playerID {
  __playerID = playerID;
  __playerID_isset = YES;
}

- (BOOL) playerIDIsSet {
  return __playerID_isset;
}

- (void) unsetPlayerID {
  __playerID_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPlayerID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLunregisterPlayer_args"];
  if (__playerID_isset) {
    [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __playerID];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLunregisterPlayer_args("];
  [ms appendString: @"playerID:"];
  [ms appendFormat: @"%i", __playerID];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLgameWithID_args : NSObject <NSCoding> {
  int32_t __gameID;

  BOOL __gameID_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=gameID, setter=setGameID:) int32_t gameID;
#endif

- (id) initWithGameID: (int32_t) gameID;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) gameID;
- (void) setGameID: (int32_t) gameID;
- (BOOL) gameIDIsSet;

@end

@implementation GLgameWithID_args

- (id) initWithGameID: (int32_t) gameID
{
  self = [super init];
  __gameID = gameID;
  __gameID_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gameID"])
  {
    __gameID = [decoder decodeInt32ForKey: @"gameID"];
    __gameID_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gameID_isset)
  {
    [encoder encodeInt32: __gameID forKey: @"gameID"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) gameID {
  return __gameID;
}

- (void) setGameID: (int32_t) gameID {
  __gameID = gameID;
  __gameID_isset = YES;
}

- (BOOL) gameIDIsSet {
  return __gameID_isset;
}

- (void) unsetGameID {
  __gameID_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGameID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLgameWithID_args"];
  if (__gameID_isset) {
    [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __gameID];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLgameWithID_args("];
  [ms appendString: @"gameID:"];
  [ms appendFormat: @"%i", __gameID];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLgameWithID_result : NSObject <NSCoding> {
  GLGame * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GLGame * success;
#endif

- (id) initWithSuccess: (GLGame *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (GLGame *) success;
- (void) setSuccess: (GLGame *) success;
- (BOOL) successIsSet;

@end

@implementation GLgameWithID_result

- (id) initWithSuccess: (GLGame *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (GLGame *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (GLGame *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GLGame *fieldValue = [[GLGame alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLgameWithID_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLgameWithID_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLnewGame_args : NSObject <NSCoding> {
  int32_t __playerID;
  NSString * __name;
  NSString * __type;
  NSArray * __expansions;

  BOOL __playerID_isset;
  BOOL __name_isset;
  BOOL __type_isset;
  BOOL __expansions_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=playerID, setter=setPlayerID:) int32_t playerID;
@property (nonatomic, retain, getter=name, setter=setName:) NSString * name;
@property (nonatomic, retain, getter=type, setter=setType:) NSString * type;
@property (nonatomic, retain, getter=expansions, setter=setExpansions:) NSArray * expansions;
#endif

- (id) initWithPlayerID: (int32_t) playerID name: (NSString *) name type: (NSString *) type expansions: (NSArray *) expansions;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) playerID;
- (void) setPlayerID: (int32_t) playerID;
- (BOOL) playerIDIsSet;

- (NSString *) name;
- (void) setName: (NSString *) name;
- (BOOL) nameIsSet;

- (NSString *) type;
- (void) setType: (NSString *) type;
- (BOOL) typeIsSet;

- (NSArray *) expansions;
- (void) setExpansions: (NSArray *) expansions;
- (BOOL) expansionsIsSet;

@end

@implementation GLnewGame_args

- (id) initWithPlayerID: (int32_t) playerID name: (NSString *) name type: (NSString *) type expansions: (NSArray *) expansions
{
  self = [super init];
  __playerID = playerID;
  __playerID_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  __type = [type retain];
  __type_isset = YES;
  __expansions = [expansions retain];
  __expansions_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"playerID"])
  {
    __playerID = [decoder decodeInt32ForKey: @"playerID"];
    __playerID_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [[decoder decodeObjectForKey: @"type"] retain];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"expansions"])
  {
    __expansions = [[decoder decodeObjectForKey: @"expansions"] retain];
    __expansions_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__playerID_isset)
  {
    [encoder encodeInt32: __playerID forKey: @"playerID"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__type_isset)
  {
    [encoder encodeObject: __type forKey: @"type"];
  }
  if (__expansions_isset)
  {
    [encoder encodeObject: __expansions forKey: @"expansions"];
  }
}

- (void) dealloc
{
  [__name release];
  [__type release];
  [__expansions release];
  [super dealloc];
}

- (int32_t) playerID {
  return __playerID;
}

- (void) setPlayerID: (int32_t) playerID {
  __playerID = playerID;
  __playerID_isset = YES;
}

- (BOOL) playerIDIsSet {
  return __playerID_isset;
}

- (void) unsetPlayerID {
  __playerID_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) type {
  return [[__type retain] autorelease];
}

- (void) setType: (NSString *) type {
  [type retain];
  [__type release];
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  [__type release];
  __type = nil;
  __type_isset = NO;
}

- (NSArray *) expansions {
  return [[__expansions retain] autorelease];
}

- (void) setExpansions: (NSArray *) expansions {
  [expansions retain];
  [__expansions release];
  __expansions = expansions;
  __expansions_isset = YES;
}

- (BOOL) expansionsIsSet {
  return __expansions_isset;
}

- (void) unsetExpansions {
  [__expansions release];
  __expansions = nil;
  __expansions_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPlayerID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            NSString * _elem17 = [inProtocol readString];
            [fieldValue addObject: _elem17];
          }
          [inProtocol readListEnd];
          [self setExpansions: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLnewGame_args"];
  if (__playerID_isset) {
    [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __playerID];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    if (__type != nil) {
      [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__expansions_isset) {
    if (__expansions != nil) {
      [outProtocol writeFieldBeginWithName: @"expansions" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__expansions count]];
        int i19;
        for (i19 = 0; i19 < [__expansions count]; i19++)
        {
          [outProtocol writeString: [__expansions objectAtIndex: i19]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLnewGame_args("];
  [ms appendString: @"playerID:"];
  [ms appendFormat: @"%i", __playerID];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",type:"];
  [ms appendFormat: @"\"%@\"", __type];
  [ms appendString: @",expansions:"];
  [ms appendFormat: @"%@", __expansions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLnewGame_result : NSObject <NSCoding> {
  GLGame * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GLGame * success;
#endif

- (id) initWithSuccess: (GLGame *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (GLGame *) success;
- (void) setSuccess: (GLGame *) success;
- (BOOL) successIsSet;

@end

@implementation GLnewGame_result

- (id) initWithSuccess: (GLGame *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (GLGame *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (GLGame *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GLGame *fieldValue = [[GLGame alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLnewGame_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLnewGame_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLrequestToJoinGame_args : NSObject <NSCoding> {
  int32_t __playerID;
  int32_t __gameID;

  BOOL __playerID_isset;
  BOOL __gameID_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=playerID, setter=setPlayerID:) int32_t playerID;
@property (nonatomic, getter=gameID, setter=setGameID:) int32_t gameID;
#endif

- (id) initWithPlayerID: (int32_t) playerID gameID: (int32_t) gameID;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) playerID;
- (void) setPlayerID: (int32_t) playerID;
- (BOOL) playerIDIsSet;

- (int32_t) gameID;
- (void) setGameID: (int32_t) gameID;
- (BOOL) gameIDIsSet;

@end

@implementation GLrequestToJoinGame_args

- (id) initWithPlayerID: (int32_t) playerID gameID: (int32_t) gameID
{
  self = [super init];
  __playerID = playerID;
  __playerID_isset = YES;
  __gameID = gameID;
  __gameID_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"playerID"])
  {
    __playerID = [decoder decodeInt32ForKey: @"playerID"];
    __playerID_isset = YES;
  }
  if ([decoder containsValueForKey: @"gameID"])
  {
    __gameID = [decoder decodeInt32ForKey: @"gameID"];
    __gameID_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__playerID_isset)
  {
    [encoder encodeInt32: __playerID forKey: @"playerID"];
  }
  if (__gameID_isset)
  {
    [encoder encodeInt32: __gameID forKey: @"gameID"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) playerID {
  return __playerID;
}

- (void) setPlayerID: (int32_t) playerID {
  __playerID = playerID;
  __playerID_isset = YES;
}

- (BOOL) playerIDIsSet {
  return __playerID_isset;
}

- (void) unsetPlayerID {
  __playerID_isset = NO;
}

- (int32_t) gameID {
  return __gameID;
}

- (void) setGameID: (int32_t) gameID {
  __gameID = gameID;
  __gameID_isset = YES;
}

- (BOOL) gameIDIsSet {
  return __gameID_isset;
}

- (void) unsetGameID {
  __gameID_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPlayerID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGameID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLrequestToJoinGame_args"];
  if (__playerID_isset) {
    [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __playerID];
    [outProtocol writeFieldEnd];
  }
  if (__gameID_isset) {
    [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __gameID];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLrequestToJoinGame_args("];
  [ms appendString: @"playerID:"];
  [ms appendFormat: @"%i", __playerID];
  [ms appendString: @",gameID:"];
  [ms appendFormat: @"%i", __gameID];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLrequestToJoinGame_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

@end

@implementation GLrequestToJoinGame_result

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLrequestToJoinGame_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLrequestToJoinGame_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLswitchToTeam_args : NSObject <NSCoding> {
  int32_t __playerID;
  int32_t __gameID;
  int32_t __team;

  BOOL __playerID_isset;
  BOOL __gameID_isset;
  BOOL __team_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=playerID, setter=setPlayerID:) int32_t playerID;
@property (nonatomic, getter=gameID, setter=setGameID:) int32_t gameID;
@property (nonatomic, getter=team, setter=setTeam:) int32_t team;
#endif

- (id) initWithPlayerID: (int32_t) playerID gameID: (int32_t) gameID team: (int32_t) team;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) playerID;
- (void) setPlayerID: (int32_t) playerID;
- (BOOL) playerIDIsSet;

- (int32_t) gameID;
- (void) setGameID: (int32_t) gameID;
- (BOOL) gameIDIsSet;

- (int32_t) team;
- (void) setTeam: (int32_t) team;
- (BOOL) teamIsSet;

@end

@implementation GLswitchToTeam_args

- (id) initWithPlayerID: (int32_t) playerID gameID: (int32_t) gameID team: (int32_t) team
{
  self = [super init];
  __playerID = playerID;
  __playerID_isset = YES;
  __gameID = gameID;
  __gameID_isset = YES;
  __team = team;
  __team_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"playerID"])
  {
    __playerID = [decoder decodeInt32ForKey: @"playerID"];
    __playerID_isset = YES;
  }
  if ([decoder containsValueForKey: @"gameID"])
  {
    __gameID = [decoder decodeInt32ForKey: @"gameID"];
    __gameID_isset = YES;
  }
  if ([decoder containsValueForKey: @"team"])
  {
    __team = [decoder decodeInt32ForKey: @"team"];
    __team_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__playerID_isset)
  {
    [encoder encodeInt32: __playerID forKey: @"playerID"];
  }
  if (__gameID_isset)
  {
    [encoder encodeInt32: __gameID forKey: @"gameID"];
  }
  if (__team_isset)
  {
    [encoder encodeInt32: __team forKey: @"team"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) playerID {
  return __playerID;
}

- (void) setPlayerID: (int32_t) playerID {
  __playerID = playerID;
  __playerID_isset = YES;
}

- (BOOL) playerIDIsSet {
  return __playerID_isset;
}

- (void) unsetPlayerID {
  __playerID_isset = NO;
}

- (int32_t) gameID {
  return __gameID;
}

- (void) setGameID: (int32_t) gameID {
  __gameID = gameID;
  __gameID_isset = YES;
}

- (BOOL) gameIDIsSet {
  return __gameID_isset;
}

- (void) unsetGameID {
  __gameID_isset = NO;
}

- (int32_t) team {
  return __team;
}

- (void) setTeam: (int32_t) team {
  __team = team;
  __team_isset = YES;
}

- (BOOL) teamIsSet {
  return __team_isset;
}

- (void) unsetTeam {
  __team_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPlayerID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGameID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTeam: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLswitchToTeam_args"];
  if (__playerID_isset) {
    [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __playerID];
    [outProtocol writeFieldEnd];
  }
  if (__gameID_isset) {
    [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __gameID];
    [outProtocol writeFieldEnd];
  }
  if (__team_isset) {
    [outProtocol writeFieldBeginWithName: @"team" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __team];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLswitchToTeam_args("];
  [ms appendString: @"playerID:"];
  [ms appendFormat: @"%i", __playerID];
  [ms appendString: @",gameID:"];
  [ms appendFormat: @"%i", __gameID];
  [ms appendString: @",team:"];
  [ms appendFormat: @"%i", __team];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLcancelGame_args : NSObject <NSCoding> {
  int32_t __playerID;
  GLGame * __game;

  BOOL __playerID_isset;
  BOOL __game_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=playerID, setter=setPlayerID:) int32_t playerID;
@property (nonatomic, retain, getter=game, setter=setGame:) GLGame * game;
#endif

- (id) initWithPlayerID: (int32_t) playerID game: (GLGame *) game;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) playerID;
- (void) setPlayerID: (int32_t) playerID;
- (BOOL) playerIDIsSet;

- (GLGame *) game;
- (void) setGame: (GLGame *) game;
- (BOOL) gameIsSet;

@end

@implementation GLcancelGame_args

- (id) initWithPlayerID: (int32_t) playerID game: (GLGame *) game
{
  self = [super init];
  __playerID = playerID;
  __playerID_isset = YES;
  __game = [game retain];
  __game_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"playerID"])
  {
    __playerID = [decoder decodeInt32ForKey: @"playerID"];
    __playerID_isset = YES;
  }
  if ([decoder containsValueForKey: @"game"])
  {
    __game = [[decoder decodeObjectForKey: @"game"] retain];
    __game_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__playerID_isset)
  {
    [encoder encodeInt32: __playerID forKey: @"playerID"];
  }
  if (__game_isset)
  {
    [encoder encodeObject: __game forKey: @"game"];
  }
}

- (void) dealloc
{
  [__game release];
  [super dealloc];
}

- (int32_t) playerID {
  return __playerID;
}

- (void) setPlayerID: (int32_t) playerID {
  __playerID = playerID;
  __playerID_isset = YES;
}

- (BOOL) playerIDIsSet {
  return __playerID_isset;
}

- (void) unsetPlayerID {
  __playerID_isset = NO;
}

- (GLGame *) game {
  return [[__game retain] autorelease];
}

- (void) setGame: (GLGame *) game {
  [game retain];
  [__game release];
  __game = game;
  __game_isset = YES;
}

- (BOOL) gameIsSet {
  return __game_isset;
}

- (void) unsetGame {
  [__game release];
  __game = nil;
  __game_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPlayerID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          GLGame *fieldValue = [[GLGame alloc] init];
          [fieldValue read: inProtocol];
          [self setGame: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLcancelGame_args"];
  if (__playerID_isset) {
    [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __playerID];
    [outProtocol writeFieldEnd];
  }
  if (__game_isset) {
    if (__game != nil) {
      [outProtocol writeFieldBeginWithName: @"game" type: TType_STRUCT fieldID: 2];
      [__game write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLcancelGame_args("];
  [ms appendString: @"playerID:"];
  [ms appendFormat: @"%i", __playerID];
  [ms appendString: @",game:"];
  [ms appendFormat: @"%@", __game];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLgetPlayersInLobby_args : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation GLgetPlayersInLobby_args

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLgetPlayersInLobby_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLgetPlayersInLobby_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLgetPlayersInLobby_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation GLgetPlayersInLobby_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            GLPlayer *_elem22 = [[GLPlayer alloc] init];
            [_elem22 read: inProtocol];
            [fieldValue addObject: _elem22];
            [_elem22 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLgetPlayersInLobby_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i24;
        for (i24 = 0; i24 < [__success count]; i24++)
        {
          [[__success objectAtIndex: i24] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLgetPlayersInLobby_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLgetGames_args : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation GLgetGames_args

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLgetGames_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLgetGames_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLgetGames_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation GLgetGames_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size25;
          [inProtocol readListBeginReturningElementType: NULL size: &_size25];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
          int _i26;
          for (_i26 = 0; _i26 < _size25; ++_i26)
          {
            GLGame *_elem27 = [[GLGame alloc] init];
            [_elem27 read: inProtocol];
            [fieldValue addObject: _elem27];
            [_elem27 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLgetGames_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i29;
        for (i29 = 0; i29 < [__success count]; i29++)
        {
          [[__success objectAtIndex: i29] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLgetGames_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLgetPlayersInGame_args : NSObject <NSCoding> {
  GLGame * __game;

  BOOL __game_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=game, setter=setGame:) GLGame * game;
#endif

- (id) initWithGame: (GLGame *) game;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (GLGame *) game;
- (void) setGame: (GLGame *) game;
- (BOOL) gameIsSet;

@end

@implementation GLgetPlayersInGame_args

- (id) initWithGame: (GLGame *) game
{
  self = [super init];
  __game = [game retain];
  __game_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"game"])
  {
    __game = [[decoder decodeObjectForKey: @"game"] retain];
    __game_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__game_isset)
  {
    [encoder encodeObject: __game forKey: @"game"];
  }
}

- (void) dealloc
{
  [__game release];
  [super dealloc];
}

- (GLGame *) game {
  return [[__game retain] autorelease];
}

- (void) setGame: (GLGame *) game {
  [game retain];
  [__game release];
  __game = game;
  __game_isset = YES;
}

- (BOOL) gameIsSet {
  return __game_isset;
}

- (void) unsetGame {
  [__game release];
  __game = nil;
  __game_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GLGame *fieldValue = [[GLGame alloc] init];
          [fieldValue read: inProtocol];
          [self setGame: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLgetPlayersInGame_args"];
  if (__game_isset) {
    if (__game != nil) {
      [outProtocol writeFieldBeginWithName: @"game" type: TType_STRUCT fieldID: 1];
      [__game write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLgetPlayersInGame_args("];
  [ms appendString: @"game:"];
  [ms appendFormat: @"%@", __game];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLgetPlayersInGame_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation GLgetPlayersInGame_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size30;
          [inProtocol readListBeginReturningElementType: NULL size: &_size30];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size30];
          int _i31;
          for (_i31 = 0; _i31 < _size30; ++_i31)
          {
            GLPlayer *_elem32 = [[GLPlayer alloc] init];
            [_elem32 read: inProtocol];
            [fieldValue addObject: _elem32];
            [_elem32 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLgetPlayersInGame_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i34;
        for (i34 = 0; i34 < [__success count]; i34++)
        {
          [[__success objectAtIndex: i34] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLgetPlayersInGame_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLgetGame_args : NSObject <NSCoding> {
  int32_t __gameID;

  BOOL __gameID_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=gameID, setter=setGameID:) int32_t gameID;
#endif

- (id) initWithGameID: (int32_t) gameID;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) gameID;
- (void) setGameID: (int32_t) gameID;
- (BOOL) gameIDIsSet;

@end

@implementation GLgetGame_args

- (id) initWithGameID: (int32_t) gameID
{
  self = [super init];
  __gameID = gameID;
  __gameID_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gameID"])
  {
    __gameID = [decoder decodeInt32ForKey: @"gameID"];
    __gameID_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gameID_isset)
  {
    [encoder encodeInt32: __gameID forKey: @"gameID"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) gameID {
  return __gameID;
}

- (void) setGameID: (int32_t) gameID {
  __gameID = gameID;
  __gameID_isset = YES;
}

- (BOOL) gameIDIsSet {
  return __gameID_isset;
}

- (void) unsetGameID {
  __gameID_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGameID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLgetGame_args"];
  if (__gameID_isset) {
    [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __gameID];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLgetGame_args("];
  [ms appendString: @"gameID:"];
  [ms appendFormat: @"%i", __gameID];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLgetGame_result : NSObject <NSCoding> {
  GLGame * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GLGame * success;
#endif

- (id) initWithSuccess: (GLGame *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (GLGame *) success;
- (void) setSuccess: (GLGame *) success;
- (BOOL) successIsSet;

@end

@implementation GLgetGame_result

- (id) initWithSuccess: (GLGame *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (GLGame *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (GLGame *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GLGame *fieldValue = [[GLGame alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLgetGame_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLgetGame_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLstartGame_args : NSObject <NSCoding> {
  int32_t __gameID;

  BOOL __gameID_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=gameID, setter=setGameID:) int32_t gameID;
#endif

- (id) initWithGameID: (int32_t) gameID;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) gameID;
- (void) setGameID: (int32_t) gameID;
- (BOOL) gameIDIsSet;

@end

@implementation GLstartGame_args

- (id) initWithGameID: (int32_t) gameID
{
  self = [super init];
  __gameID = gameID;
  __gameID_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gameID"])
  {
    __gameID = [decoder decodeInt32ForKey: @"gameID"];
    __gameID_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gameID_isset)
  {
    [encoder encodeInt32: __gameID forKey: @"gameID"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) gameID {
  return __gameID;
}

- (void) setGameID: (int32_t) gameID {
  __gameID = gameID;
  __gameID_isset = YES;
}

- (BOOL) gameIDIsSet {
  return __gameID_isset;
}

- (void) unsetGameID {
  __gameID_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGameID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLstartGame_args"];
  if (__gameID_isset) {
    [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __gameID];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLstartGame_args("];
  [ms appendString: @"gameID:"];
  [ms appendFormat: @"%i", __gameID];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLaddEvent_args : NSObject <NSCoding> {
  GLEvent * __event;

  BOOL __event_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=event, setter=setEvent:) GLEvent * event;
#endif

- (id) initWithEvent: (GLEvent *) event;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (GLEvent *) event;
- (void) setEvent: (GLEvent *) event;
- (BOOL) eventIsSet;

@end

@implementation GLaddEvent_args

- (id) initWithEvent: (GLEvent *) event
{
  self = [super init];
  __event = [event retain];
  __event_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"event"])
  {
    __event = [[decoder decodeObjectForKey: @"event"] retain];
    __event_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__event_isset)
  {
    [encoder encodeObject: __event forKey: @"event"];
  }
}

- (void) dealloc
{
  [__event release];
  [super dealloc];
}

- (GLEvent *) event {
  return [[__event retain] autorelease];
}

- (void) setEvent: (GLEvent *) event {
  [event retain];
  [__event release];
  __event = event;
  __event_isset = YES;
}

- (BOOL) eventIsSet {
  return __event_isset;
}

- (void) unsetEvent {
  [__event release];
  __event = nil;
  __event_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GLEvent *fieldValue = [[GLEvent alloc] init];
          [fieldValue read: inProtocol];
          [self setEvent: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLaddEvent_args"];
  if (__event_isset) {
    if (__event != nil) {
      [outProtocol writeFieldBeginWithName: @"event" type: TType_STRUCT fieldID: 1];
      [__event write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLaddEvent_args("];
  [ms appendString: @"event:"];
  [ms appendFormat: @"%@", __event];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLpassExpansion_args : NSObject <NSCoding> {
  int32_t __gameID;
  int32_t __playerID;
  NSString * __expansion;

  BOOL __gameID_isset;
  BOOL __playerID_isset;
  BOOL __expansion_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=gameID, setter=setGameID:) int32_t gameID;
@property (nonatomic, getter=playerID, setter=setPlayerID:) int32_t playerID;
@property (nonatomic, retain, getter=expansion, setter=setExpansion:) NSString * expansion;
#endif

- (id) initWithGameID: (int32_t) gameID playerID: (int32_t) playerID expansion: (NSString *) expansion;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) gameID;
- (void) setGameID: (int32_t) gameID;
- (BOOL) gameIDIsSet;

- (int32_t) playerID;
- (void) setPlayerID: (int32_t) playerID;
- (BOOL) playerIDIsSet;

- (NSString *) expansion;
- (void) setExpansion: (NSString *) expansion;
- (BOOL) expansionIsSet;

@end

@implementation GLpassExpansion_args

- (id) initWithGameID: (int32_t) gameID playerID: (int32_t) playerID expansion: (NSString *) expansion
{
  self = [super init];
  __gameID = gameID;
  __gameID_isset = YES;
  __playerID = playerID;
  __playerID_isset = YES;
  __expansion = [expansion retain];
  __expansion_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gameID"])
  {
    __gameID = [decoder decodeInt32ForKey: @"gameID"];
    __gameID_isset = YES;
  }
  if ([decoder containsValueForKey: @"playerID"])
  {
    __playerID = [decoder decodeInt32ForKey: @"playerID"];
    __playerID_isset = YES;
  }
  if ([decoder containsValueForKey: @"expansion"])
  {
    __expansion = [[decoder decodeObjectForKey: @"expansion"] retain];
    __expansion_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gameID_isset)
  {
    [encoder encodeInt32: __gameID forKey: @"gameID"];
  }
  if (__playerID_isset)
  {
    [encoder encodeInt32: __playerID forKey: @"playerID"];
  }
  if (__expansion_isset)
  {
    [encoder encodeObject: __expansion forKey: @"expansion"];
  }
}

- (void) dealloc
{
  [__expansion release];
  [super dealloc];
}

- (int32_t) gameID {
  return __gameID;
}

- (void) setGameID: (int32_t) gameID {
  __gameID = gameID;
  __gameID_isset = YES;
}

- (BOOL) gameIDIsSet {
  return __gameID_isset;
}

- (void) unsetGameID {
  __gameID_isset = NO;
}

- (int32_t) playerID {
  return __playerID;
}

- (void) setPlayerID: (int32_t) playerID {
  __playerID = playerID;
  __playerID_isset = YES;
}

- (BOOL) playerIDIsSet {
  return __playerID_isset;
}

- (void) unsetPlayerID {
  __playerID_isset = NO;
}

- (NSString *) expansion {
  return [[__expansion retain] autorelease];
}

- (void) setExpansion: (NSString *) expansion {
  [expansion retain];
  [__expansion release];
  __expansion = expansion;
  __expansion_isset = YES;
}

- (BOOL) expansionIsSet {
  return __expansion_isset;
}

- (void) unsetExpansion {
  [__expansion release];
  __expansion = nil;
  __expansion_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGameID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPlayerID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setExpansion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLpassExpansion_args"];
  if (__gameID_isset) {
    [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __gameID];
    [outProtocol writeFieldEnd];
  }
  if (__playerID_isset) {
    [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __playerID];
    [outProtocol writeFieldEnd];
  }
  if (__expansion_isset) {
    if (__expansion != nil) {
      [outProtocol writeFieldBeginWithName: @"expansion" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __expansion];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLpassExpansion_args("];
  [ms appendString: @"gameID:"];
  [ms appendFormat: @"%i", __gameID];
  [ms appendString: @",playerID:"];
  [ms appendFormat: @"%i", __playerID];
  [ms appendString: @",expansion:"];
  [ms appendFormat: @"\"%@\"", __expansion];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLcurrentEventIndex_args : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation GLcurrentEventIndex_args

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLcurrentEventIndex_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLcurrentEventIndex_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLcurrentEventIndex_result : NSObject <NSCoding> {
  int32_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
#endif

- (id) initWithSuccess: (int32_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) success;
- (void) setSuccess: (int32_t) success;
- (BOOL) successIsSet;

@end

@implementation GLcurrentEventIndex_result

- (id) initWithSuccess: (int32_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt32ForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt32: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) success {
  return __success;
}

- (void) setSuccess: (int32_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLcurrentEventIndex_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLcurrentEventIndex_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLgetEvents_args : NSObject <NSCoding> {
  int32_t __sinceIndex;

  BOOL __sinceIndex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=sinceIndex, setter=setSinceIndex:) int32_t sinceIndex;
#endif

- (id) initWithSinceIndex: (int32_t) sinceIndex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) sinceIndex;
- (void) setSinceIndex: (int32_t) sinceIndex;
- (BOOL) sinceIndexIsSet;

@end

@implementation GLgetEvents_args

- (id) initWithSinceIndex: (int32_t) sinceIndex
{
  self = [super init];
  __sinceIndex = sinceIndex;
  __sinceIndex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sinceIndex"])
  {
    __sinceIndex = [decoder decodeInt32ForKey: @"sinceIndex"];
    __sinceIndex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sinceIndex_isset)
  {
    [encoder encodeInt32: __sinceIndex forKey: @"sinceIndex"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) sinceIndex {
  return __sinceIndex;
}

- (void) setSinceIndex: (int32_t) sinceIndex {
  __sinceIndex = sinceIndex;
  __sinceIndex_isset = YES;
}

- (BOOL) sinceIndexIsSet {
  return __sinceIndex_isset;
}

- (void) unsetSinceIndex {
  __sinceIndex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSinceIndex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLgetEvents_args"];
  if (__sinceIndex_isset) {
    [outProtocol writeFieldBeginWithName: @"sinceIndex" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __sinceIndex];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLgetEvents_args("];
  [ms appendString: @"sinceIndex:"];
  [ms appendFormat: @"%i", __sinceIndex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GLgetEvents_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation GLgetEvents_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size35;
          [inProtocol readListBeginReturningElementType: NULL size: &_size35];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size35];
          int _i36;
          for (_i36 = 0; _i36 < _size35; ++_i36)
          {
            GLEvent *_elem37 = [[GLEvent alloc] init];
            [_elem37 read: inProtocol];
            [fieldValue addObject: _elem37];
            [_elem37 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GLgetEvents_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i39;
        for (i39 = 0; i39 < [__success count]; i39++)
        {
          [[__success objectAtIndex: i39] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GLgetEvents_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TGameLobbyClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_GLregisterPlayer: (NSString *) playerName
{
  [outProtocol writeMessageBeginWithName: @"GLregisterPlayer" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GLregisterPlayer_args"];
  if (playerName != nil)  {
    [outProtocol writeFieldBeginWithName: @"playerName" type: TType_STRING fieldID: 1];
    [outProtocol writeString: playerName];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int32_t) recv_GLregisterPlayer
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GLregisterPlayer_result * result = [[[GLregisterPlayer_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GLregisterPlayer failed: unknown result"];
}

- (int32_t) GLregisterPlayer: (NSString *) playerName
{
  [self send_GLregisterPlayer: playerName];
  return [self recv_GLregisterPlayer];
}

- (void) send_GLunregisterPlayer: (int32_t) playerID
{
  [outProtocol writeMessageBeginWithName: @"GLunregisterPlayer" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GLunregisterPlayer_args"];
  [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: playerID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) GLunregisterPlayer: (int32_t) playerID
{
  [self send_GLunregisterPlayer: playerID];
}

- (void) send_GLgameWithID: (int32_t) gameID
{
  [outProtocol writeMessageBeginWithName: @"GLgameWithID" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GLgameWithID_args"];
  [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: gameID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GLGame *) recv_GLgameWithID
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GLgameWithID_result * result = [[[GLgameWithID_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GLgameWithID failed: unknown result"];
}

- (GLGame *) GLgameWithID: (int32_t) gameID
{
  [self send_GLgameWithID: gameID];
  return [self recv_GLgameWithID];
}

- (void) send_GLnewGame: (int32_t) playerID : (NSString *) name : (NSString *) type : (NSArray *) expansions
{
  [outProtocol writeMessageBeginWithName: @"GLnewGame" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GLnewGame_args"];
  [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: playerID];
  [outProtocol writeFieldEnd];
  if (name != nil)  {
    [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
    [outProtocol writeString: name];
    [outProtocol writeFieldEnd];
  }
  if (type != nil)  {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 3];
    [outProtocol writeString: type];
    [outProtocol writeFieldEnd];
  }
  if (expansions != nil)  {
    [outProtocol writeFieldBeginWithName: @"expansions" type: TType_LIST fieldID: 4];
    {
      [outProtocol writeListBeginWithElementType: TType_STRING size: [expansions count]];
      int i41;
      for (i41 = 0; i41 < [expansions count]; i41++)
      {
        [outProtocol writeString: [expansions objectAtIndex: i41]];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GLGame *) recv_GLnewGame
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GLnewGame_result * result = [[[GLnewGame_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GLnewGame failed: unknown result"];
}

- (GLGame *) GLnewGame: (int32_t) playerID : (NSString *) name : (NSString *) type : (NSArray *) expansions
{
  [self send_GLnewGame: playerID : name : type : expansions];
  return [self recv_GLnewGame];
}

- (void) send_GLrequestToJoinGame: (int32_t) playerID : (int32_t) gameID
{
  [outProtocol writeMessageBeginWithName: @"GLrequestToJoinGame" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GLrequestToJoinGame_args"];
  [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: playerID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: gameID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_GLrequestToJoinGame
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GLrequestToJoinGame_result * result = [[[GLrequestToJoinGame_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GLrequestToJoinGame failed: unknown result"];
}

- (BOOL) GLrequestToJoinGame: (int32_t) playerID : (int32_t) gameID
{
  [self send_GLrequestToJoinGame: playerID : gameID];
  return [self recv_GLrequestToJoinGame];
}

- (void) send_GLswitchToTeam: (int32_t) playerID : (int32_t) gameID : (int32_t) team
{
  [outProtocol writeMessageBeginWithName: @"GLswitchToTeam" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GLswitchToTeam_args"];
  [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: playerID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: gameID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"team" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: team];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) GLswitchToTeam: (int32_t) playerID : (int32_t) gameID : (int32_t) team
{
  [self send_GLswitchToTeam: playerID : gameID : team];
}

- (void) send_GLcancelGame: (int32_t) playerID : (GLGame *) game
{
  [outProtocol writeMessageBeginWithName: @"GLcancelGame" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GLcancelGame_args"];
  [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: playerID];
  [outProtocol writeFieldEnd];
  if (game != nil)  {
    [outProtocol writeFieldBeginWithName: @"game" type: TType_STRUCT fieldID: 2];
    [game write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) GLcancelGame: (int32_t) playerID : (GLGame *) game
{
  [self send_GLcancelGame: playerID : game];
}

- (void) send_GLgetPlayersInLobby
{
  [outProtocol writeMessageBeginWithName: @"GLgetPlayersInLobby" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GLgetPlayersInLobby_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_GLgetPlayersInLobby
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GLgetPlayersInLobby_result * result = [[[GLgetPlayersInLobby_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GLgetPlayersInLobby failed: unknown result"];
}

- (NSArray *) GLgetPlayersInLobby
{
  [self send_GLgetPlayersInLobby];
  return [self recv_GLgetPlayersInLobby];
}

- (void) send_GLgetGames
{
  [outProtocol writeMessageBeginWithName: @"GLgetGames" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GLgetGames_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_GLgetGames
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GLgetGames_result * result = [[[GLgetGames_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GLgetGames failed: unknown result"];
}

- (NSArray *) GLgetGames
{
  [self send_GLgetGames];
  return [self recv_GLgetGames];
}

- (void) send_GLgetPlayersInGame: (GLGame *) game
{
  [outProtocol writeMessageBeginWithName: @"GLgetPlayersInGame" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GLgetPlayersInGame_args"];
  if (game != nil)  {
    [outProtocol writeFieldBeginWithName: @"game" type: TType_STRUCT fieldID: 1];
    [game write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_GLgetPlayersInGame
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GLgetPlayersInGame_result * result = [[[GLgetPlayersInGame_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GLgetPlayersInGame failed: unknown result"];
}

- (NSArray *) GLgetPlayersInGame: (GLGame *) game
{
  [self send_GLgetPlayersInGame: game];
  return [self recv_GLgetPlayersInGame];
}

- (void) send_GLgetGame: (int32_t) gameID
{
  [outProtocol writeMessageBeginWithName: @"GLgetGame" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GLgetGame_args"];
  [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: gameID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (GLGame *) recv_GLgetGame
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GLgetGame_result * result = [[[GLgetGame_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GLgetGame failed: unknown result"];
}

- (GLGame *) GLgetGame: (int32_t) gameID
{
  [self send_GLgetGame: gameID];
  return [self recv_GLgetGame];
}

- (void) send_GLstartGame: (int32_t) gameID
{
  [outProtocol writeMessageBeginWithName: @"GLstartGame" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GLstartGame_args"];
  [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: gameID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) GLstartGame: (int32_t) gameID
{
  [self send_GLstartGame: gameID];
}

- (void) send_GLaddEvent: (GLEvent *) event
{
  [outProtocol writeMessageBeginWithName: @"GLaddEvent" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GLaddEvent_args"];
  if (event != nil)  {
    [outProtocol writeFieldBeginWithName: @"event" type: TType_STRUCT fieldID: 1];
    [event write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) GLaddEvent: (GLEvent *) event
{
  [self send_GLaddEvent: event];
}

- (void) send_GLpassExpansion: (int32_t) gameID : (int32_t) playerID : (NSString *) expansion
{
  [outProtocol writeMessageBeginWithName: @"GLpassExpansion" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GLpassExpansion_args"];
  [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: gameID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: playerID];
  [outProtocol writeFieldEnd];
  if (expansion != nil)  {
    [outProtocol writeFieldBeginWithName: @"expansion" type: TType_STRING fieldID: 3];
    [outProtocol writeString: expansion];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) GLpassExpansion: (int32_t) gameID : (int32_t) playerID : (NSString *) expansion
{
  [self send_GLpassExpansion: gameID : playerID : expansion];
}

- (void) send_GLcurrentEventIndex
{
  [outProtocol writeMessageBeginWithName: @"GLcurrentEventIndex" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GLcurrentEventIndex_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int32_t) recv_GLcurrentEventIndex
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GLcurrentEventIndex_result * result = [[[GLcurrentEventIndex_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GLcurrentEventIndex failed: unknown result"];
}

- (int32_t) GLcurrentEventIndex
{
  [self send_GLcurrentEventIndex];
  return [self recv_GLcurrentEventIndex];
}

- (void) send_GLgetEvents: (int32_t) sinceIndex
{
  [outProtocol writeMessageBeginWithName: @"GLgetEvents" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GLgetEvents_args"];
  [outProtocol writeFieldBeginWithName: @"sinceIndex" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: sinceIndex];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_GLgetEvents
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GLgetEvents_result * result = [[[GLgetEvents_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GLgetEvents failed: unknown result"];
}

- (NSArray *) GLgetEvents: (int32_t) sinceIndex
{
  [self send_GLgetEvents: sinceIndex];
  return [self recv_GLgetEvents];
}

@end

@implementation TGameLobbyProcessor

- (id) initWithTGameLobby: (id <TGameLobby>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_GLregisterPlayer_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GLregisterPlayer"];
  }
  {
    SEL s = @selector(process_GLunregisterPlayer_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GLunregisterPlayer"];
  }
  {
    SEL s = @selector(process_GLgameWithID_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GLgameWithID"];
  }
  {
    SEL s = @selector(process_GLnewGame_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GLnewGame"];
  }
  {
    SEL s = @selector(process_GLrequestToJoinGame_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GLrequestToJoinGame"];
  }
  {
    SEL s = @selector(process_GLswitchToTeam_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GLswitchToTeam"];
  }
  {
    SEL s = @selector(process_GLcancelGame_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GLcancelGame"];
  }
  {
    SEL s = @selector(process_GLgetPlayersInLobby_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GLgetPlayersInLobby"];
  }
  {
    SEL s = @selector(process_GLgetGames_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GLgetGames"];
  }
  {
    SEL s = @selector(process_GLgetPlayersInGame_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GLgetPlayersInGame"];
  }
  {
    SEL s = @selector(process_GLgetGame_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GLgetGame"];
  }
  {
    SEL s = @selector(process_GLstartGame_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GLstartGame"];
  }
  {
    SEL s = @selector(process_GLaddEvent_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GLaddEvent"];
  }
  {
    SEL s = @selector(process_GLpassExpansion_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GLpassExpansion"];
  }
  {
    SEL s = @selector(process_GLcurrentEventIndex_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GLcurrentEventIndex"];
  }
  {
    SEL s = @selector(process_GLgetEvents_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"GLgetEvents"];
  }
  return self;
}

- (id<TGameLobby>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_GLregisterPlayer_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GLregisterPlayer_args * args = [[GLregisterPlayer_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GLregisterPlayer_result * result = [[GLregisterPlayer_result alloc] init];
  [result setSuccess: [mService GLregisterPlayer: [args playerName]]];
  [outProtocol writeMessageBeginWithName: @"GLregisterPlayer"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_GLgameWithID_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GLgameWithID_args * args = [[GLgameWithID_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GLgameWithID_result * result = [[GLgameWithID_result alloc] init];
  [result setSuccess: [mService GLgameWithID: [args gameID]]];
  [outProtocol writeMessageBeginWithName: @"GLgameWithID"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_GLnewGame_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GLnewGame_args * args = [[GLnewGame_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GLnewGame_result * result = [[GLnewGame_result alloc] init];
  [result setSuccess: [mService GLnewGame: [args playerID]: [args name]: [args type]: [args expansions]]];
  [outProtocol writeMessageBeginWithName: @"GLnewGame"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_GLrequestToJoinGame_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GLrequestToJoinGame_args * args = [[GLrequestToJoinGame_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GLrequestToJoinGame_result * result = [[GLrequestToJoinGame_result alloc] init];
  [result setSuccess: [mService GLrequestToJoinGame: [args playerID]: [args gameID]]];
  [outProtocol writeMessageBeginWithName: @"GLrequestToJoinGame"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_GLgetPlayersInLobby_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GLgetPlayersInLobby_args * args = [[GLgetPlayersInLobby_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GLgetPlayersInLobby_result * result = [[GLgetPlayersInLobby_result alloc] init];
  [result setSuccess: [mService GLgetPlayersInLobby]];
  [outProtocol writeMessageBeginWithName: @"GLgetPlayersInLobby"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_GLgetGames_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GLgetGames_args * args = [[GLgetGames_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GLgetGames_result * result = [[GLgetGames_result alloc] init];
  [result setSuccess: [mService GLgetGames]];
  [outProtocol writeMessageBeginWithName: @"GLgetGames"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_GLgetPlayersInGame_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GLgetPlayersInGame_args * args = [[GLgetPlayersInGame_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GLgetPlayersInGame_result * result = [[GLgetPlayersInGame_result alloc] init];
  [result setSuccess: [mService GLgetPlayersInGame: [args game]]];
  [outProtocol writeMessageBeginWithName: @"GLgetPlayersInGame"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_GLgetGame_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GLgetGame_args * args = [[GLgetGame_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GLgetGame_result * result = [[GLgetGame_result alloc] init];
  [result setSuccess: [mService GLgetGame: [args gameID]]];
  [outProtocol writeMessageBeginWithName: @"GLgetGame"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_GLcurrentEventIndex_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GLcurrentEventIndex_args * args = [[GLcurrentEventIndex_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GLcurrentEventIndex_result * result = [[GLcurrentEventIndex_result alloc] init];
  [result setSuccess: [mService GLcurrentEventIndex]];
  [outProtocol writeMessageBeginWithName: @"GLcurrentEventIndex"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_GLgetEvents_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GLgetEvents_args * args = [[GLgetEvents_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GLgetEvents_result * result = [[GLgetEvents_result alloc] init];
  [result setSuccess: [mService GLgetEvents: [args sinceIndex]]];
  [outProtocol writeMessageBeginWithName: @"GLgetEvents"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

