/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"


#import "PTG.h"

@implementation Event

- (id) initWithIndex: (int32_t) index type: (NSString *) type sender: (int32_t) sender data: (NSArray *) data senderName: (NSString *) senderName
{
  self = [super init];
  __index = index;
  __index_isset = YES;
  __type = [type retain];
  __type_isset = YES;
  __sender = sender;
  __sender_isset = YES;
  __data = [data retain];
  __data_isset = YES;
  __senderName = [senderName retain];
  __senderName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"index"])
  {
    __index = [decoder decodeInt32ForKey: @"index"];
    __index_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [[decoder decodeObjectForKey: @"type"] retain];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"sender"])
  {
    __sender = [decoder decodeInt32ForKey: @"sender"];
    __sender_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain];
    __data_isset = YES;
  }
  if ([decoder containsValueForKey: @"senderName"])
  {
    __senderName = [[decoder decodeObjectForKey: @"senderName"] retain];
    __senderName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__index_isset)
  {
    [encoder encodeInt32: __index forKey: @"index"];
  }
  if (__type_isset)
  {
    [encoder encodeObject: __type forKey: @"type"];
  }
  if (__sender_isset)
  {
    [encoder encodeInt32: __sender forKey: @"sender"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
  if (__senderName_isset)
  {
    [encoder encodeObject: __senderName forKey: @"senderName"];
  }
}

- (void) dealloc
{
  [__type release];
  [__data release];
  [__senderName release];
  [super dealloc];
}

- (int32_t) index {
  return __index;
}

- (void) setIndex: (int32_t) index {
  __index = index;
  __index_isset = YES;
}

- (BOOL) indexIsSet {
  return __index_isset;
}

- (void) unsetIndex {
  __index_isset = NO;
}

- (NSString *) type {
  return [[__type retain] autorelease];
}

- (void) setType: (NSString *) type {
  [type retain];
  [__type release];
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  [__type release];
  __type = nil;
  __type_isset = NO;
}

- (int32_t) sender {
  return __sender;
}

- (void) setSender: (int32_t) sender {
  __sender = sender;
  __sender_isset = YES;
}

- (BOOL) senderIsSet {
  return __sender_isset;
}

- (void) unsetSender {
  __sender_isset = NO;
}

- (NSArray *) data {
  return [[__data retain] autorelease];
}

- (void) setData: (NSArray *) data {
  [data retain];
  [__data release];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release];
  __data = nil;
  __data_isset = NO;
}

- (NSString *) senderName {
  return [[__senderName retain] autorelease];
}

- (void) setSenderName: (NSString *) senderName {
  [senderName retain];
  [__senderName release];
  __senderName = senderName;
  __senderName_isset = YES;
}

- (BOOL) senderNameIsSet {
  return __senderName_isset;
}

- (void) unsetSenderName {
  [__senderName release];
  __senderName = nil;
  __senderName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIndex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setData: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSenderName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Event"];
  if (__index_isset) {
    [outProtocol writeFieldBeginWithName: @"index" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __index];
    [outProtocol writeFieldEnd];
  }
  if (__type_isset) {
    if (__type != nil) {
      [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sender_isset) {
    [outProtocol writeFieldBeginWithName: @"sender" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __sender];
    [outProtocol writeFieldEnd];
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__data count]];
        int i4;
        for (i4 = 0; i4 < [__data count]; i4++)
        {
          [outProtocol writeString: [__data objectAtIndex: i4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__senderName_isset) {
    if (__senderName != nil) {
      [outProtocol writeFieldBeginWithName: @"senderName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __senderName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Event("];
  [ms appendString: @"index:"];
  [ms appendFormat: @"%i", __index];
  [ms appendString: @",type:"];
  [ms appendFormat: @"\"%@\"", __type];
  [ms appendString: @",sender:"];
  [ms appendFormat: @"%i", __sender];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @",senderName:"];
  [ms appendFormat: @"\"%@\"", __senderName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Player

- (id) initWithPlayerID: (int32_t) playerID playerName: (NSString *) playerName
{
  self = [super init];
  __playerID = playerID;
  __playerID_isset = YES;
  __playerName = [playerName retain];
  __playerName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"playerID"])
  {
    __playerID = [decoder decodeInt32ForKey: @"playerID"];
    __playerID_isset = YES;
  }
  if ([decoder containsValueForKey: @"playerName"])
  {
    __playerName = [[decoder decodeObjectForKey: @"playerName"] retain];
    __playerName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__playerID_isset)
  {
    [encoder encodeInt32: __playerID forKey: @"playerID"];
  }
  if (__playerName_isset)
  {
    [encoder encodeObject: __playerName forKey: @"playerName"];
  }
}

- (void) dealloc
{
  [__playerName release];
  [super dealloc];
}

- (int32_t) playerID {
  return __playerID;
}

- (void) setPlayerID: (int32_t) playerID {
  __playerID = playerID;
  __playerID_isset = YES;
}

- (BOOL) playerIDIsSet {
  return __playerID_isset;
}

- (void) unsetPlayerID {
  __playerID_isset = NO;
}

- (NSString *) playerName {
  return [[__playerName retain] autorelease];
}

- (void) setPlayerName: (NSString *) playerName {
  [playerName retain];
  [__playerName release];
  __playerName = playerName;
  __playerName_isset = YES;
}

- (BOOL) playerNameIsSet {
  return __playerName_isset;
}

- (void) unsetPlayerName {
  [__playerName release];
  __playerName = nil;
  __playerName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPlayerID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPlayerName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Player"];
  if (__playerID_isset) {
    [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __playerID];
    [outProtocol writeFieldEnd];
  }
  if (__playerName_isset) {
    if (__playerName != nil) {
      [outProtocol writeFieldBeginWithName: @"playerName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __playerName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Player("];
  [ms appendString: @"playerID:"];
  [ms appendFormat: @"%i", __playerID];
  [ms appendString: @",playerName:"];
  [ms appendFormat: @"\"%@\"", __playerName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation PTGConstants
+ (void) initialize {
}
@end

@interface registerPlayer_args : NSObject <NSCoding> {
  int32_t __gameID;
  NSString * __playerName;
  int32_t __team;

  BOOL __gameID_isset;
  BOOL __playerName_isset;
  BOOL __team_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=gameID, setter=setGameID:) int32_t gameID;
@property (nonatomic, retain, getter=playerName, setter=setPlayerName:) NSString * playerName;
@property (nonatomic, getter=team, setter=setTeam:) int32_t team;
#endif

- (id) initWithGameID: (int32_t) gameID playerName: (NSString *) playerName team: (int32_t) team;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) gameID;
- (void) setGameID: (int32_t) gameID;
- (BOOL) gameIDIsSet;

- (NSString *) playerName;
- (void) setPlayerName: (NSString *) playerName;
- (BOOL) playerNameIsSet;

- (int32_t) team;
- (void) setTeam: (int32_t) team;
- (BOOL) teamIsSet;

@end

@implementation registerPlayer_args

- (id) initWithGameID: (int32_t) gameID playerName: (NSString *) playerName team: (int32_t) team
{
  self = [super init];
  __gameID = gameID;
  __gameID_isset = YES;
  __playerName = [playerName retain];
  __playerName_isset = YES;
  __team = team;
  __team_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gameID"])
  {
    __gameID = [decoder decodeInt32ForKey: @"gameID"];
    __gameID_isset = YES;
  }
  if ([decoder containsValueForKey: @"playerName"])
  {
    __playerName = [[decoder decodeObjectForKey: @"playerName"] retain];
    __playerName_isset = YES;
  }
  if ([decoder containsValueForKey: @"team"])
  {
    __team = [decoder decodeInt32ForKey: @"team"];
    __team_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gameID_isset)
  {
    [encoder encodeInt32: __gameID forKey: @"gameID"];
  }
  if (__playerName_isset)
  {
    [encoder encodeObject: __playerName forKey: @"playerName"];
  }
  if (__team_isset)
  {
    [encoder encodeInt32: __team forKey: @"team"];
  }
}

- (void) dealloc
{
  [__playerName release];
  [super dealloc];
}

- (int32_t) gameID {
  return __gameID;
}

- (void) setGameID: (int32_t) gameID {
  __gameID = gameID;
  __gameID_isset = YES;
}

- (BOOL) gameIDIsSet {
  return __gameID_isset;
}

- (void) unsetGameID {
  __gameID_isset = NO;
}

- (NSString *) playerName {
  return [[__playerName retain] autorelease];
}

- (void) setPlayerName: (NSString *) playerName {
  [playerName retain];
  [__playerName release];
  __playerName = playerName;
  __playerName_isset = YES;
}

- (BOOL) playerNameIsSet {
  return __playerName_isset;
}

- (void) unsetPlayerName {
  [__playerName release];
  __playerName = nil;
  __playerName_isset = NO;
}

- (int32_t) team {
  return __team;
}

- (void) setTeam: (int32_t) team {
  __team = team;
  __team_isset = YES;
}

- (BOOL) teamIsSet {
  return __team_isset;
}

- (void) unsetTeam {
  __team_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGameID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPlayerName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTeam: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"registerPlayer_args"];
  if (__gameID_isset) {
    [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __gameID];
    [outProtocol writeFieldEnd];
  }
  if (__playerName_isset) {
    if (__playerName != nil) {
      [outProtocol writeFieldBeginWithName: @"playerName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __playerName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__team_isset) {
    [outProtocol writeFieldBeginWithName: @"team" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __team];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"registerPlayer_args("];
  [ms appendString: @"gameID:"];
  [ms appendFormat: @"%i", __gameID];
  [ms appendString: @",playerName:"];
  [ms appendFormat: @"\"%@\"", __playerName];
  [ms appendString: @",team:"];
  [ms appendFormat: @"%i", __team];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RegisterPlayer_result : NSObject <NSCoding> {
  int32_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
#endif

- (id) initWithSuccess: (int32_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) success;
- (void) setSuccess: (int32_t) success;
- (BOOL) successIsSet;

@end

@implementation RegisterPlayer_result

- (id) initWithSuccess: (int32_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt32ForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt32: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) success {
  return __success;
}

- (void) setSuccess: (int32_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegisterPlayer_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RegisterPlayer_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface unregisterPlayer_args : NSObject <NSCoding> {
  int32_t __gameID;
  int32_t __playerID;

  BOOL __gameID_isset;
  BOOL __playerID_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=gameID, setter=setGameID:) int32_t gameID;
@property (nonatomic, getter=playerID, setter=setPlayerID:) int32_t playerID;
#endif

- (id) initWithGameID: (int32_t) gameID playerID: (int32_t) playerID;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) gameID;
- (void) setGameID: (int32_t) gameID;
- (BOOL) gameIDIsSet;

- (int32_t) playerID;
- (void) setPlayerID: (int32_t) playerID;
- (BOOL) playerIDIsSet;

@end

@implementation unregisterPlayer_args

- (id) initWithGameID: (int32_t) gameID playerID: (int32_t) playerID
{
  self = [super init];
  __gameID = gameID;
  __gameID_isset = YES;
  __playerID = playerID;
  __playerID_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gameID"])
  {
    __gameID = [decoder decodeInt32ForKey: @"gameID"];
    __gameID_isset = YES;
  }
  if ([decoder containsValueForKey: @"playerID"])
  {
    __playerID = [decoder decodeInt32ForKey: @"playerID"];
    __playerID_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gameID_isset)
  {
    [encoder encodeInt32: __gameID forKey: @"gameID"];
  }
  if (__playerID_isset)
  {
    [encoder encodeInt32: __playerID forKey: @"playerID"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) gameID {
  return __gameID;
}

- (void) setGameID: (int32_t) gameID {
  __gameID = gameID;
  __gameID_isset = YES;
}

- (BOOL) gameIDIsSet {
  return __gameID_isset;
}

- (void) unsetGameID {
  __gameID_isset = NO;
}

- (int32_t) playerID {
  return __playerID;
}

- (void) setPlayerID: (int32_t) playerID {
  __playerID = playerID;
  __playerID_isset = YES;
}

- (BOOL) playerIDIsSet {
  return __playerID_isset;
}

- (void) unsetPlayerID {
  __playerID_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGameID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPlayerID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"unregisterPlayer_args"];
  if (__gameID_isset) {
    [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __gameID];
    [outProtocol writeFieldEnd];
  }
  if (__playerID_isset) {
    [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __playerID];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"unregisterPlayer_args("];
  [ms appendString: @"gameID:"];
  [ms appendFormat: @"%i", __gameID];
  [ms appendString: @",playerID:"];
  [ms appendFormat: @"%i", __playerID];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface setDeck_args : NSObject <NSCoding> {
  int32_t __gameID;
  int32_t __playerID;
  NSString * __deckName;
  int32_t __deckSize;

  BOOL __gameID_isset;
  BOOL __playerID_isset;
  BOOL __deckName_isset;
  BOOL __deckSize_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=gameID, setter=setGameID:) int32_t gameID;
@property (nonatomic, getter=playerID, setter=setPlayerID:) int32_t playerID;
@property (nonatomic, retain, getter=deckName, setter=setDeckName:) NSString * deckName;
@property (nonatomic, getter=deckSize, setter=setDeckSize:) int32_t deckSize;
#endif

- (id) initWithGameID: (int32_t) gameID playerID: (int32_t) playerID deckName: (NSString *) deckName deckSize: (int32_t) deckSize;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) gameID;
- (void) setGameID: (int32_t) gameID;
- (BOOL) gameIDIsSet;

- (int32_t) playerID;
- (void) setPlayerID: (int32_t) playerID;
- (BOOL) playerIDIsSet;

- (NSString *) deckName;
- (void) setDeckName: (NSString *) deckName;
- (BOOL) deckNameIsSet;

- (int32_t) deckSize;
- (void) setDeckSize: (int32_t) deckSize;
- (BOOL) deckSizeIsSet;

@end

@implementation setDeck_args

- (id) initWithGameID: (int32_t) gameID playerID: (int32_t) playerID deckName: (NSString *) deckName deckSize: (int32_t) deckSize
{
  self = [super init];
  __gameID = gameID;
  __gameID_isset = YES;
  __playerID = playerID;
  __playerID_isset = YES;
  __deckName = [deckName retain];
  __deckName_isset = YES;
  __deckSize = deckSize;
  __deckSize_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gameID"])
  {
    __gameID = [decoder decodeInt32ForKey: @"gameID"];
    __gameID_isset = YES;
  }
  if ([decoder containsValueForKey: @"playerID"])
  {
    __playerID = [decoder decodeInt32ForKey: @"playerID"];
    __playerID_isset = YES;
  }
  if ([decoder containsValueForKey: @"deckName"])
  {
    __deckName = [[decoder decodeObjectForKey: @"deckName"] retain];
    __deckName_isset = YES;
  }
  if ([decoder containsValueForKey: @"deckSize"])
  {
    __deckSize = [decoder decodeInt32ForKey: @"deckSize"];
    __deckSize_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gameID_isset)
  {
    [encoder encodeInt32: __gameID forKey: @"gameID"];
  }
  if (__playerID_isset)
  {
    [encoder encodeInt32: __playerID forKey: @"playerID"];
  }
  if (__deckName_isset)
  {
    [encoder encodeObject: __deckName forKey: @"deckName"];
  }
  if (__deckSize_isset)
  {
    [encoder encodeInt32: __deckSize forKey: @"deckSize"];
  }
}

- (void) dealloc
{
  [__deckName release];
  [super dealloc];
}

- (int32_t) gameID {
  return __gameID;
}

- (void) setGameID: (int32_t) gameID {
  __gameID = gameID;
  __gameID_isset = YES;
}

- (BOOL) gameIDIsSet {
  return __gameID_isset;
}

- (void) unsetGameID {
  __gameID_isset = NO;
}

- (int32_t) playerID {
  return __playerID;
}

- (void) setPlayerID: (int32_t) playerID {
  __playerID = playerID;
  __playerID_isset = YES;
}

- (BOOL) playerIDIsSet {
  return __playerID_isset;
}

- (void) unsetPlayerID {
  __playerID_isset = NO;
}

- (NSString *) deckName {
  return [[__deckName retain] autorelease];
}

- (void) setDeckName: (NSString *) deckName {
  [deckName retain];
  [__deckName release];
  __deckName = deckName;
  __deckName_isset = YES;
}

- (BOOL) deckNameIsSet {
  return __deckName_isset;
}

- (void) unsetDeckName {
  [__deckName release];
  __deckName = nil;
  __deckName_isset = NO;
}

- (int32_t) deckSize {
  return __deckSize;
}

- (void) setDeckSize: (int32_t) deckSize {
  __deckSize = deckSize;
  __deckSize_isset = YES;
}

- (BOOL) deckSizeIsSet {
  return __deckSize_isset;
}

- (void) unsetDeckSize {
  __deckSize_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGameID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPlayerID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeckName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDeckSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"setDeck_args"];
  if (__gameID_isset) {
    [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __gameID];
    [outProtocol writeFieldEnd];
  }
  if (__playerID_isset) {
    [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __playerID];
    [outProtocol writeFieldEnd];
  }
  if (__deckName_isset) {
    if (__deckName != nil) {
      [outProtocol writeFieldBeginWithName: @"deckName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __deckName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deckSize_isset) {
    [outProtocol writeFieldBeginWithName: @"deckSize" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __deckSize];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"setDeck_args("];
  [ms appendString: @"gameID:"];
  [ms appendFormat: @"%i", __gameID];
  [ms appendString: @",playerID:"];
  [ms appendFormat: @"%i", __playerID];
  [ms appendString: @",deckName:"];
  [ms appendFormat: @"\"%@\"", __deckName];
  [ms appendString: @",deckSize:"];
  [ms appendFormat: @"%i", __deckSize];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface moveCard_args : NSObject <NSCoding> {
  int32_t __gameID;
  int32_t __playerID;
  NSString * __abbreviation;
  NSString * __index;
  int32_t __originalPosition;
  int32_t __newPosition;
  BOOL __tapped;

  BOOL __gameID_isset;
  BOOL __playerID_isset;
  BOOL __abbreviation_isset;
  BOOL __index_isset;
  BOOL __originalPosition_isset;
  BOOL __newPosition_isset;
  BOOL __tapped_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=gameID, setter=setGameID:) int32_t gameID;
@property (nonatomic, getter=playerID, setter=setPlayerID:) int32_t playerID;
@property (nonatomic, retain, getter=abbreviation, setter=setAbbreviation:) NSString * abbreviation;
@property (nonatomic, retain, getter=index, setter=setIndex:) NSString * index;
@property (nonatomic, getter=originalPosition, setter=setOriginalPosition:) int32_t originalPosition;
@property (nonatomic, getter=newPosition, setter=setNewPosition:) int32_t newPosition;
@property (nonatomic, getter=tapped, setter=setTapped:) BOOL tapped;
#endif

- (id) initWithGameID: (int32_t) gameID playerID: (int32_t) playerID abbreviation: (NSString *) abbreviation index: (NSString *) index originalPosition: (int32_t) originalPosition newPosition: (int32_t) newPosition tapped: (BOOL) tapped;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) gameID;
- (void) setGameID: (int32_t) gameID;
- (BOOL) gameIDIsSet;

- (int32_t) playerID;
- (void) setPlayerID: (int32_t) playerID;
- (BOOL) playerIDIsSet;

- (NSString *) abbreviation;
- (void) setAbbreviation: (NSString *) abbreviation;
- (BOOL) abbreviationIsSet;

- (NSString *) index;
- (void) setIndex: (NSString *) index;
- (BOOL) indexIsSet;

- (int32_t) originalPosition;
- (void) setOriginalPosition: (int32_t) originalPosition;
- (BOOL) originalPositionIsSet;

- (int32_t) newPosition;
- (void) setNewPosition: (int32_t) newPosition;
- (BOOL) newPositionIsSet;

- (BOOL) tapped;
- (void) setTapped: (BOOL) tapped;
- (BOOL) tappedIsSet;

@end

@implementation moveCard_args

- (id) initWithGameID: (int32_t) gameID playerID: (int32_t) playerID abbreviation: (NSString *) abbreviation index: (NSString *) index originalPosition: (int32_t) originalPosition newPosition: (int32_t) newPosition tapped: (BOOL) tapped
{
  self = [super init];
  __gameID = gameID;
  __gameID_isset = YES;
  __playerID = playerID;
  __playerID_isset = YES;
  __abbreviation = [abbreviation retain];
  __abbreviation_isset = YES;
  __index = [index retain];
  __index_isset = YES;
  __originalPosition = originalPosition;
  __originalPosition_isset = YES;
  __newPosition = newPosition;
  __newPosition_isset = YES;
  __tapped = tapped;
  __tapped_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gameID"])
  {
    __gameID = [decoder decodeInt32ForKey: @"gameID"];
    __gameID_isset = YES;
  }
  if ([decoder containsValueForKey: @"playerID"])
  {
    __playerID = [decoder decodeInt32ForKey: @"playerID"];
    __playerID_isset = YES;
  }
  if ([decoder containsValueForKey: @"abbreviation"])
  {
    __abbreviation = [[decoder decodeObjectForKey: @"abbreviation"] retain];
    __abbreviation_isset = YES;
  }
  if ([decoder containsValueForKey: @"index"])
  {
    __index = [[decoder decodeObjectForKey: @"index"] retain];
    __index_isset = YES;
  }
  if ([decoder containsValueForKey: @"originalPosition"])
  {
    __originalPosition = [decoder decodeInt32ForKey: @"originalPosition"];
    __originalPosition_isset = YES;
  }
  if ([decoder containsValueForKey: @"newPosition"])
  {
    __newPosition = [decoder decodeInt32ForKey: @"newPosition"];
    __newPosition_isset = YES;
  }
  if ([decoder containsValueForKey: @"tapped"])
  {
    __tapped = [decoder decodeBoolForKey: @"tapped"];
    __tapped_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gameID_isset)
  {
    [encoder encodeInt32: __gameID forKey: @"gameID"];
  }
  if (__playerID_isset)
  {
    [encoder encodeInt32: __playerID forKey: @"playerID"];
  }
  if (__abbreviation_isset)
  {
    [encoder encodeObject: __abbreviation forKey: @"abbreviation"];
  }
  if (__index_isset)
  {
    [encoder encodeObject: __index forKey: @"index"];
  }
  if (__originalPosition_isset)
  {
    [encoder encodeInt32: __originalPosition forKey: @"originalPosition"];
  }
  if (__newPosition_isset)
  {
    [encoder encodeInt32: __newPosition forKey: @"newPosition"];
  }
  if (__tapped_isset)
  {
    [encoder encodeBool: __tapped forKey: @"tapped"];
  }
}

- (void) dealloc
{
  [__abbreviation release];
  [__index release];
  [super dealloc];
}

- (int32_t) gameID {
  return __gameID;
}

- (void) setGameID: (int32_t) gameID {
  __gameID = gameID;
  __gameID_isset = YES;
}

- (BOOL) gameIDIsSet {
  return __gameID_isset;
}

- (void) unsetGameID {
  __gameID_isset = NO;
}

- (int32_t) playerID {
  return __playerID;
}

- (void) setPlayerID: (int32_t) playerID {
  __playerID = playerID;
  __playerID_isset = YES;
}

- (BOOL) playerIDIsSet {
  return __playerID_isset;
}

- (void) unsetPlayerID {
  __playerID_isset = NO;
}

- (NSString *) abbreviation {
  return [[__abbreviation retain] autorelease];
}

- (void) setAbbreviation: (NSString *) abbreviation {
  [abbreviation retain];
  [__abbreviation release];
  __abbreviation = abbreviation;
  __abbreviation_isset = YES;
}

- (BOOL) abbreviationIsSet {
  return __abbreviation_isset;
}

- (void) unsetAbbreviation {
  [__abbreviation release];
  __abbreviation = nil;
  __abbreviation_isset = NO;
}

- (NSString *) index {
  return [[__index retain] autorelease];
}

- (void) setIndex: (NSString *) index {
  [index retain];
  [__index release];
  __index = index;
  __index_isset = YES;
}

- (BOOL) indexIsSet {
  return __index_isset;
}

- (void) unsetIndex {
  [__index release];
  __index = nil;
  __index_isset = NO;
}

- (int32_t) originalPosition {
  return __originalPosition;
}

- (void) setOriginalPosition: (int32_t) originalPosition {
  __originalPosition = originalPosition;
  __originalPosition_isset = YES;
}

- (BOOL) originalPositionIsSet {
  return __originalPosition_isset;
}

- (void) unsetOriginalPosition {
  __originalPosition_isset = NO;
}

- (int32_t) newPosition {
  return __newPosition;
}

- (void) setNewPosition: (int32_t) newPosition {
  __newPosition = newPosition;
  __newPosition_isset = YES;
}

- (BOOL) newPositionIsSet {
  return __newPosition_isset;
}

- (void) unsetNewPosition {
  __newPosition_isset = NO;
}

- (BOOL) tapped {
  return __tapped;
}

- (void) setTapped: (BOOL) tapped {
  __tapped = tapped;
  __tapped_isset = YES;
}

- (BOOL) tappedIsSet {
  return __tapped_isset;
}

- (void) unsetTapped {
  __tapped_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGameID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPlayerID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAbbreviation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIndex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOriginalPosition: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNewPosition: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setTapped: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"moveCard_args"];
  if (__gameID_isset) {
    [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __gameID];
    [outProtocol writeFieldEnd];
  }
  if (__playerID_isset) {
    [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __playerID];
    [outProtocol writeFieldEnd];
  }
  if (__abbreviation_isset) {
    if (__abbreviation != nil) {
      [outProtocol writeFieldBeginWithName: @"abbreviation" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __abbreviation];
      [outProtocol writeFieldEnd];
    }
  }
  if (__index_isset) {
    if (__index != nil) {
      [outProtocol writeFieldBeginWithName: @"index" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __index];
      [outProtocol writeFieldEnd];
    }
  }
  if (__originalPosition_isset) {
    [outProtocol writeFieldBeginWithName: @"originalPosition" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __originalPosition];
    [outProtocol writeFieldEnd];
  }
  if (__newPosition_isset) {
    [outProtocol writeFieldBeginWithName: @"newPosition" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __newPosition];
    [outProtocol writeFieldEnd];
  }
  if (__tapped_isset) {
    [outProtocol writeFieldBeginWithName: @"tapped" type: TType_BOOL fieldID: 7];
    [outProtocol writeBool: __tapped];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"moveCard_args("];
  [ms appendString: @"gameID:"];
  [ms appendFormat: @"%i", __gameID];
  [ms appendString: @",playerID:"];
  [ms appendFormat: @"%i", __playerID];
  [ms appendString: @",abbreviation:"];
  [ms appendFormat: @"\"%@\"", __abbreviation];
  [ms appendString: @",index:"];
  [ms appendFormat: @"\"%@\"", __index];
  [ms appendString: @",originalPosition:"];
  [ms appendFormat: @"%i", __originalPosition];
  [ms appendString: @",newPosition:"];
  [ms appendFormat: @"%i", __newPosition];
  [ms appendString: @",tapped:"];
  [ms appendFormat: @"%i", __tapped];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface removeCardFrom_args : NSObject <NSCoding> {
  int32_t __gameID;
  int32_t __playerID;
  int32_t __zone;
  int32_t __position;

  BOOL __gameID_isset;
  BOOL __playerID_isset;
  BOOL __zone_isset;
  BOOL __position_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=gameID, setter=setGameID:) int32_t gameID;
@property (nonatomic, getter=playerID, setter=setPlayerID:) int32_t playerID;
@property (nonatomic, getter=zone, setter=setZone:) int32_t zone;
@property (nonatomic, getter=position, setter=setPosition:) int32_t position;
#endif

- (id) initWithGameID: (int32_t) gameID playerID: (int32_t) playerID zone: (int32_t) zone position: (int32_t) position;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) gameID;
- (void) setGameID: (int32_t) gameID;
- (BOOL) gameIDIsSet;

- (int32_t) playerID;
- (void) setPlayerID: (int32_t) playerID;
- (BOOL) playerIDIsSet;

- (int32_t) zone;
- (void) setZone: (int32_t) zone;
- (BOOL) zoneIsSet;

- (int32_t) position;
- (void) setPosition: (int32_t) position;
- (BOOL) positionIsSet;

@end

@implementation removeCardFrom_args

- (id) initWithGameID: (int32_t) gameID playerID: (int32_t) playerID zone: (int32_t) zone position: (int32_t) position
{
  self = [super init];
  __gameID = gameID;
  __gameID_isset = YES;
  __playerID = playerID;
  __playerID_isset = YES;
  __zone = zone;
  __zone_isset = YES;
  __position = position;
  __position_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gameID"])
  {
    __gameID = [decoder decodeInt32ForKey: @"gameID"];
    __gameID_isset = YES;
  }
  if ([decoder containsValueForKey: @"playerID"])
  {
    __playerID = [decoder decodeInt32ForKey: @"playerID"];
    __playerID_isset = YES;
  }
  if ([decoder containsValueForKey: @"zone"])
  {
    __zone = [decoder decodeInt32ForKey: @"zone"];
    __zone_isset = YES;
  }
  if ([decoder containsValueForKey: @"position"])
  {
    __position = [decoder decodeInt32ForKey: @"position"];
    __position_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gameID_isset)
  {
    [encoder encodeInt32: __gameID forKey: @"gameID"];
  }
  if (__playerID_isset)
  {
    [encoder encodeInt32: __playerID forKey: @"playerID"];
  }
  if (__zone_isset)
  {
    [encoder encodeInt32: __zone forKey: @"zone"];
  }
  if (__position_isset)
  {
    [encoder encodeInt32: __position forKey: @"position"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) gameID {
  return __gameID;
}

- (void) setGameID: (int32_t) gameID {
  __gameID = gameID;
  __gameID_isset = YES;
}

- (BOOL) gameIDIsSet {
  return __gameID_isset;
}

- (void) unsetGameID {
  __gameID_isset = NO;
}

- (int32_t) playerID {
  return __playerID;
}

- (void) setPlayerID: (int32_t) playerID {
  __playerID = playerID;
  __playerID_isset = YES;
}

- (BOOL) playerIDIsSet {
  return __playerID_isset;
}

- (void) unsetPlayerID {
  __playerID_isset = NO;
}

- (int32_t) zone {
  return __zone;
}

- (void) setZone: (int32_t) zone {
  __zone = zone;
  __zone_isset = YES;
}

- (BOOL) zoneIsSet {
  return __zone_isset;
}

- (void) unsetZone {
  __zone_isset = NO;
}

- (int32_t) position {
  return __position;
}

- (void) setPosition: (int32_t) position {
  __position = position;
  __position_isset = YES;
}

- (BOOL) positionIsSet {
  return __position_isset;
}

- (void) unsetPosition {
  __position_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGameID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPlayerID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setZone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPosition: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"removeCardFrom_args"];
  if (__gameID_isset) {
    [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __gameID];
    [outProtocol writeFieldEnd];
  }
  if (__playerID_isset) {
    [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __playerID];
    [outProtocol writeFieldEnd];
  }
  if (__zone_isset) {
    [outProtocol writeFieldBeginWithName: @"zone" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __zone];
    [outProtocol writeFieldEnd];
  }
  if (__position_isset) {
    [outProtocol writeFieldBeginWithName: @"position" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __position];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"removeCardFrom_args("];
  [ms appendString: @"gameID:"];
  [ms appendFormat: @"%i", __gameID];
  [ms appendString: @",playerID:"];
  [ms appendFormat: @"%i", __playerID];
  [ms appendString: @",zone:"];
  [ms appendFormat: @"%i", __zone];
  [ms appendString: @",position:"];
  [ms appendFormat: @"%i", __position];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface addCardTo_args : NSObject <NSCoding> {
  int32_t __gameID;
  int32_t __playerID;
  NSString * __cardString;
  int32_t __zone;
  int32_t __position;

  BOOL __gameID_isset;
  BOOL __playerID_isset;
  BOOL __cardString_isset;
  BOOL __zone_isset;
  BOOL __position_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=gameID, setter=setGameID:) int32_t gameID;
@property (nonatomic, getter=playerID, setter=setPlayerID:) int32_t playerID;
@property (nonatomic, retain, getter=cardString, setter=setCardString:) NSString * cardString;
@property (nonatomic, getter=zone, setter=setZone:) int32_t zone;
@property (nonatomic, getter=position, setter=setPosition:) int32_t position;
#endif

- (id) initWithGameID: (int32_t) gameID playerID: (int32_t) playerID cardString: (NSString *) cardString zone: (int32_t) zone position: (int32_t) position;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) gameID;
- (void) setGameID: (int32_t) gameID;
- (BOOL) gameIDIsSet;

- (int32_t) playerID;
- (void) setPlayerID: (int32_t) playerID;
- (BOOL) playerIDIsSet;

- (NSString *) cardString;
- (void) setCardString: (NSString *) cardString;
- (BOOL) cardStringIsSet;

- (int32_t) zone;
- (void) setZone: (int32_t) zone;
- (BOOL) zoneIsSet;

- (int32_t) position;
- (void) setPosition: (int32_t) position;
- (BOOL) positionIsSet;

@end

@implementation addCardTo_args

- (id) initWithGameID: (int32_t) gameID playerID: (int32_t) playerID cardString: (NSString *) cardString zone: (int32_t) zone position: (int32_t) position
{
  self = [super init];
  __gameID = gameID;
  __gameID_isset = YES;
  __playerID = playerID;
  __playerID_isset = YES;
  __cardString = [cardString retain];
  __cardString_isset = YES;
  __zone = zone;
  __zone_isset = YES;
  __position = position;
  __position_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gameID"])
  {
    __gameID = [decoder decodeInt32ForKey: @"gameID"];
    __gameID_isset = YES;
  }
  if ([decoder containsValueForKey: @"playerID"])
  {
    __playerID = [decoder decodeInt32ForKey: @"playerID"];
    __playerID_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardString"])
  {
    __cardString = [[decoder decodeObjectForKey: @"cardString"] retain];
    __cardString_isset = YES;
  }
  if ([decoder containsValueForKey: @"zone"])
  {
    __zone = [decoder decodeInt32ForKey: @"zone"];
    __zone_isset = YES;
  }
  if ([decoder containsValueForKey: @"position"])
  {
    __position = [decoder decodeInt32ForKey: @"position"];
    __position_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gameID_isset)
  {
    [encoder encodeInt32: __gameID forKey: @"gameID"];
  }
  if (__playerID_isset)
  {
    [encoder encodeInt32: __playerID forKey: @"playerID"];
  }
  if (__cardString_isset)
  {
    [encoder encodeObject: __cardString forKey: @"cardString"];
  }
  if (__zone_isset)
  {
    [encoder encodeInt32: __zone forKey: @"zone"];
  }
  if (__position_isset)
  {
    [encoder encodeInt32: __position forKey: @"position"];
  }
}

- (void) dealloc
{
  [__cardString release];
  [super dealloc];
}

- (int32_t) gameID {
  return __gameID;
}

- (void) setGameID: (int32_t) gameID {
  __gameID = gameID;
  __gameID_isset = YES;
}

- (BOOL) gameIDIsSet {
  return __gameID_isset;
}

- (void) unsetGameID {
  __gameID_isset = NO;
}

- (int32_t) playerID {
  return __playerID;
}

- (void) setPlayerID: (int32_t) playerID {
  __playerID = playerID;
  __playerID_isset = YES;
}

- (BOOL) playerIDIsSet {
  return __playerID_isset;
}

- (void) unsetPlayerID {
  __playerID_isset = NO;
}

- (NSString *) cardString {
  return [[__cardString retain] autorelease];
}

- (void) setCardString: (NSString *) cardString {
  [cardString retain];
  [__cardString release];
  __cardString = cardString;
  __cardString_isset = YES;
}

- (BOOL) cardStringIsSet {
  return __cardString_isset;
}

- (void) unsetCardString {
  [__cardString release];
  __cardString = nil;
  __cardString_isset = NO;
}

- (int32_t) zone {
  return __zone;
}

- (void) setZone: (int32_t) zone {
  __zone = zone;
  __zone_isset = YES;
}

- (BOOL) zoneIsSet {
  return __zone_isset;
}

- (void) unsetZone {
  __zone_isset = NO;
}

- (int32_t) position {
  return __position;
}

- (void) setPosition: (int32_t) position {
  __position = position;
  __position_isset = YES;
}

- (BOOL) positionIsSet {
  return __position_isset;
}

- (void) unsetPosition {
  __position_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGameID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPlayerID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCardString: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setZone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPosition: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"addCardTo_args"];
  if (__gameID_isset) {
    [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __gameID];
    [outProtocol writeFieldEnd];
  }
  if (__playerID_isset) {
    [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __playerID];
    [outProtocol writeFieldEnd];
  }
  if (__cardString_isset) {
    if (__cardString != nil) {
      [outProtocol writeFieldBeginWithName: @"cardString" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __cardString];
      [outProtocol writeFieldEnd];
    }
  }
  if (__zone_isset) {
    [outProtocol writeFieldBeginWithName: @"zone" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __zone];
    [outProtocol writeFieldEnd];
  }
  if (__position_isset) {
    [outProtocol writeFieldBeginWithName: @"position" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __position];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"addCardTo_args("];
  [ms appendString: @"gameID:"];
  [ms appendFormat: @"%i", __gameID];
  [ms appendString: @",playerID:"];
  [ms appendFormat: @"%i", __playerID];
  [ms appendString: @",cardString:"];
  [ms appendFormat: @"\"%@\"", __cardString];
  [ms appendString: @",zone:"];
  [ms appendFormat: @"%i", __zone];
  [ms appendString: @",position:"];
  [ms appendFormat: @"%i", __position];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface setCardTo_args : NSObject <NSCoding> {
  int32_t __gameID;
  int32_t __playerID;
  NSString * __cardString;
  int32_t __zone;
  int32_t __position;

  BOOL __gameID_isset;
  BOOL __playerID_isset;
  BOOL __cardString_isset;
  BOOL __zone_isset;
  BOOL __position_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=gameID, setter=setGameID:) int32_t gameID;
@property (nonatomic, getter=playerID, setter=setPlayerID:) int32_t playerID;
@property (nonatomic, retain, getter=cardString, setter=setCardString:) NSString * cardString;
@property (nonatomic, getter=zone, setter=setZone:) int32_t zone;
@property (nonatomic, getter=position, setter=setPosition:) int32_t position;
#endif

- (id) initWithGameID: (int32_t) gameID playerID: (int32_t) playerID cardString: (NSString *) cardString zone: (int32_t) zone position: (int32_t) position;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) gameID;
- (void) setGameID: (int32_t) gameID;
- (BOOL) gameIDIsSet;

- (int32_t) playerID;
- (void) setPlayerID: (int32_t) playerID;
- (BOOL) playerIDIsSet;

- (NSString *) cardString;
- (void) setCardString: (NSString *) cardString;
- (BOOL) cardStringIsSet;

- (int32_t) zone;
- (void) setZone: (int32_t) zone;
- (BOOL) zoneIsSet;

- (int32_t) position;
- (void) setPosition: (int32_t) position;
- (BOOL) positionIsSet;

@end

@implementation setCardTo_args

- (id) initWithGameID: (int32_t) gameID playerID: (int32_t) playerID cardString: (NSString *) cardString zone: (int32_t) zone position: (int32_t) position
{
  self = [super init];
  __gameID = gameID;
  __gameID_isset = YES;
  __playerID = playerID;
  __playerID_isset = YES;
  __cardString = [cardString retain];
  __cardString_isset = YES;
  __zone = zone;
  __zone_isset = YES;
  __position = position;
  __position_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gameID"])
  {
    __gameID = [decoder decodeInt32ForKey: @"gameID"];
    __gameID_isset = YES;
  }
  if ([decoder containsValueForKey: @"playerID"])
  {
    __playerID = [decoder decodeInt32ForKey: @"playerID"];
    __playerID_isset = YES;
  }
  if ([decoder containsValueForKey: @"cardString"])
  {
    __cardString = [[decoder decodeObjectForKey: @"cardString"] retain];
    __cardString_isset = YES;
  }
  if ([decoder containsValueForKey: @"zone"])
  {
    __zone = [decoder decodeInt32ForKey: @"zone"];
    __zone_isset = YES;
  }
  if ([decoder containsValueForKey: @"position"])
  {
    __position = [decoder decodeInt32ForKey: @"position"];
    __position_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gameID_isset)
  {
    [encoder encodeInt32: __gameID forKey: @"gameID"];
  }
  if (__playerID_isset)
  {
    [encoder encodeInt32: __playerID forKey: @"playerID"];
  }
  if (__cardString_isset)
  {
    [encoder encodeObject: __cardString forKey: @"cardString"];
  }
  if (__zone_isset)
  {
    [encoder encodeInt32: __zone forKey: @"zone"];
  }
  if (__position_isset)
  {
    [encoder encodeInt32: __position forKey: @"position"];
  }
}

- (void) dealloc
{
  [__cardString release];
  [super dealloc];
}

- (int32_t) gameID {
  return __gameID;
}

- (void) setGameID: (int32_t) gameID {
  __gameID = gameID;
  __gameID_isset = YES;
}

- (BOOL) gameIDIsSet {
  return __gameID_isset;
}

- (void) unsetGameID {
  __gameID_isset = NO;
}

- (int32_t) playerID {
  return __playerID;
}

- (void) setPlayerID: (int32_t) playerID {
  __playerID = playerID;
  __playerID_isset = YES;
}

- (BOOL) playerIDIsSet {
  return __playerID_isset;
}

- (void) unsetPlayerID {
  __playerID_isset = NO;
}

- (NSString *) cardString {
  return [[__cardString retain] autorelease];
}

- (void) setCardString: (NSString *) cardString {
  [cardString retain];
  [__cardString release];
  __cardString = cardString;
  __cardString_isset = YES;
}

- (BOOL) cardStringIsSet {
  return __cardString_isset;
}

- (void) unsetCardString {
  [__cardString release];
  __cardString = nil;
  __cardString_isset = NO;
}

- (int32_t) zone {
  return __zone;
}

- (void) setZone: (int32_t) zone {
  __zone = zone;
  __zone_isset = YES;
}

- (BOOL) zoneIsSet {
  return __zone_isset;
}

- (void) unsetZone {
  __zone_isset = NO;
}

- (int32_t) position {
  return __position;
}

- (void) setPosition: (int32_t) position {
  __position = position;
  __position_isset = YES;
}

- (BOOL) positionIsSet {
  return __position_isset;
}

- (void) unsetPosition {
  __position_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGameID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPlayerID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCardString: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setZone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPosition: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"setCardTo_args"];
  if (__gameID_isset) {
    [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __gameID];
    [outProtocol writeFieldEnd];
  }
  if (__playerID_isset) {
    [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __playerID];
    [outProtocol writeFieldEnd];
  }
  if (__cardString_isset) {
    if (__cardString != nil) {
      [outProtocol writeFieldBeginWithName: @"cardString" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __cardString];
      [outProtocol writeFieldEnd];
    }
  }
  if (__zone_isset) {
    [outProtocol writeFieldBeginWithName: @"zone" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __zone];
    [outProtocol writeFieldEnd];
  }
  if (__position_isset) {
    [outProtocol writeFieldBeginWithName: @"position" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __position];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"setCardTo_args("];
  [ms appendString: @"gameID:"];
  [ms appendFormat: @"%i", __gameID];
  [ms appendString: @",playerID:"];
  [ms appendFormat: @"%i", __playerID];
  [ms appendString: @",cardString:"];
  [ms appendFormat: @"\"%@\"", __cardString];
  [ms appendString: @",zone:"];
  [ms appendFormat: @"%i", __zone];
  [ms appendString: @",position:"];
  [ms appendFormat: @"%i", __position];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface setLife_args : NSObject <NSCoding> {
  int32_t __gameID;
  int32_t __playerID;
  int32_t __life;

  BOOL __gameID_isset;
  BOOL __playerID_isset;
  BOOL __life_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=gameID, setter=setGameID:) int32_t gameID;
@property (nonatomic, getter=playerID, setter=setPlayerID:) int32_t playerID;
@property (nonatomic, getter=life, setter=setLife:) int32_t life;
#endif

- (id) initWithGameID: (int32_t) gameID playerID: (int32_t) playerID life: (int32_t) life;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) gameID;
- (void) setGameID: (int32_t) gameID;
- (BOOL) gameIDIsSet;

- (int32_t) playerID;
- (void) setPlayerID: (int32_t) playerID;
- (BOOL) playerIDIsSet;

- (int32_t) life;
- (void) setLife: (int32_t) life;
- (BOOL) lifeIsSet;

@end

@implementation setLife_args

- (id) initWithGameID: (int32_t) gameID playerID: (int32_t) playerID life: (int32_t) life
{
  self = [super init];
  __gameID = gameID;
  __gameID_isset = YES;
  __playerID = playerID;
  __playerID_isset = YES;
  __life = life;
  __life_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gameID"])
  {
    __gameID = [decoder decodeInt32ForKey: @"gameID"];
    __gameID_isset = YES;
  }
  if ([decoder containsValueForKey: @"playerID"])
  {
    __playerID = [decoder decodeInt32ForKey: @"playerID"];
    __playerID_isset = YES;
  }
  if ([decoder containsValueForKey: @"life"])
  {
    __life = [decoder decodeInt32ForKey: @"life"];
    __life_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gameID_isset)
  {
    [encoder encodeInt32: __gameID forKey: @"gameID"];
  }
  if (__playerID_isset)
  {
    [encoder encodeInt32: __playerID forKey: @"playerID"];
  }
  if (__life_isset)
  {
    [encoder encodeInt32: __life forKey: @"life"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) gameID {
  return __gameID;
}

- (void) setGameID: (int32_t) gameID {
  __gameID = gameID;
  __gameID_isset = YES;
}

- (BOOL) gameIDIsSet {
  return __gameID_isset;
}

- (void) unsetGameID {
  __gameID_isset = NO;
}

- (int32_t) playerID {
  return __playerID;
}

- (void) setPlayerID: (int32_t) playerID {
  __playerID = playerID;
  __playerID_isset = YES;
}

- (BOOL) playerIDIsSet {
  return __playerID_isset;
}

- (void) unsetPlayerID {
  __playerID_isset = NO;
}

- (int32_t) life {
  return __life;
}

- (void) setLife: (int32_t) life {
  __life = life;
  __life_isset = YES;
}

- (BOOL) lifeIsSet {
  return __life_isset;
}

- (void) unsetLife {
  __life_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGameID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPlayerID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLife: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"setLife_args"];
  if (__gameID_isset) {
    [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __gameID];
    [outProtocol writeFieldEnd];
  }
  if (__playerID_isset) {
    [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __playerID];
    [outProtocol writeFieldEnd];
  }
  if (__life_isset) {
    [outProtocol writeFieldBeginWithName: @"life" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __life];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"setLife_args("];
  [ms appendString: @"gameID:"];
  [ms appendFormat: @"%i", __gameID];
  [ms appendString: @",playerID:"];
  [ms appendFormat: @"%i", __playerID];
  [ms appendString: @",life:"];
  [ms appendFormat: @"%i", __life];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface setPoison_args : NSObject <NSCoding> {
  int32_t __gameID;
  int32_t __playerID;
  int32_t __posion;

  BOOL __gameID_isset;
  BOOL __playerID_isset;
  BOOL __posion_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=gameID, setter=setGameID:) int32_t gameID;
@property (nonatomic, getter=playerID, setter=setPlayerID:) int32_t playerID;
@property (nonatomic, getter=posion, setter=setPosion:) int32_t posion;
#endif

- (id) initWithGameID: (int32_t) gameID playerID: (int32_t) playerID posion: (int32_t) posion;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) gameID;
- (void) setGameID: (int32_t) gameID;
- (BOOL) gameIDIsSet;

- (int32_t) playerID;
- (void) setPlayerID: (int32_t) playerID;
- (BOOL) playerIDIsSet;

- (int32_t) posion;
- (void) setPosion: (int32_t) posion;
- (BOOL) posionIsSet;

@end

@implementation setPoison_args

- (id) initWithGameID: (int32_t) gameID playerID: (int32_t) playerID posion: (int32_t) posion
{
  self = [super init];
  __gameID = gameID;
  __gameID_isset = YES;
  __playerID = playerID;
  __playerID_isset = YES;
  __posion = posion;
  __posion_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gameID"])
  {
    __gameID = [decoder decodeInt32ForKey: @"gameID"];
    __gameID_isset = YES;
  }
  if ([decoder containsValueForKey: @"playerID"])
  {
    __playerID = [decoder decodeInt32ForKey: @"playerID"];
    __playerID_isset = YES;
  }
  if ([decoder containsValueForKey: @"posion"])
  {
    __posion = [decoder decodeInt32ForKey: @"posion"];
    __posion_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gameID_isset)
  {
    [encoder encodeInt32: __gameID forKey: @"gameID"];
  }
  if (__playerID_isset)
  {
    [encoder encodeInt32: __playerID forKey: @"playerID"];
  }
  if (__posion_isset)
  {
    [encoder encodeInt32: __posion forKey: @"posion"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) gameID {
  return __gameID;
}

- (void) setGameID: (int32_t) gameID {
  __gameID = gameID;
  __gameID_isset = YES;
}

- (BOOL) gameIDIsSet {
  return __gameID_isset;
}

- (void) unsetGameID {
  __gameID_isset = NO;
}

- (int32_t) playerID {
  return __playerID;
}

- (void) setPlayerID: (int32_t) playerID {
  __playerID = playerID;
  __playerID_isset = YES;
}

- (BOOL) playerIDIsSet {
  return __playerID_isset;
}

- (void) unsetPlayerID {
  __playerID_isset = NO;
}

- (int32_t) posion {
  return __posion;
}

- (void) setPosion: (int32_t) posion {
  __posion = posion;
  __posion_isset = YES;
}

- (BOOL) posionIsSet {
  return __posion_isset;
}

- (void) unsetPosion {
  __posion_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGameID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPlayerID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPosion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"setPoison_args"];
  if (__gameID_isset) {
    [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __gameID];
    [outProtocol writeFieldEnd];
  }
  if (__playerID_isset) {
    [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __playerID];
    [outProtocol writeFieldEnd];
  }
  if (__posion_isset) {
    [outProtocol writeFieldBeginWithName: @"posion" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __posion];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"setPoison_args("];
  [ms appendString: @"gameID:"];
  [ms appendFormat: @"%i", __gameID];
  [ms appendString: @",playerID:"];
  [ms appendFormat: @"%i", __playerID];
  [ms appendString: @",posion:"];
  [ms appendFormat: @"%i", __posion];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface reveal_args : NSObject <NSCoding> {
  int32_t __gameID;
  int32_t __playerID;
  NSString * __abbreviation;
  NSString * __index;

  BOOL __gameID_isset;
  BOOL __playerID_isset;
  BOOL __abbreviation_isset;
  BOOL __index_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=gameID, setter=setGameID:) int32_t gameID;
@property (nonatomic, getter=playerID, setter=setPlayerID:) int32_t playerID;
@property (nonatomic, retain, getter=abbreviation, setter=setAbbreviation:) NSString * abbreviation;
@property (nonatomic, retain, getter=index, setter=setIndex:) NSString * index;
#endif

- (id) initWithGameID: (int32_t) gameID playerID: (int32_t) playerID abbreviation: (NSString *) abbreviation index: (NSString *) index;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) gameID;
- (void) setGameID: (int32_t) gameID;
- (BOOL) gameIDIsSet;

- (int32_t) playerID;
- (void) setPlayerID: (int32_t) playerID;
- (BOOL) playerIDIsSet;

- (NSString *) abbreviation;
- (void) setAbbreviation: (NSString *) abbreviation;
- (BOOL) abbreviationIsSet;

- (NSString *) index;
- (void) setIndex: (NSString *) index;
- (BOOL) indexIsSet;

@end

@implementation reveal_args

- (id) initWithGameID: (int32_t) gameID playerID: (int32_t) playerID abbreviation: (NSString *) abbreviation index: (NSString *) index
{
  self = [super init];
  __gameID = gameID;
  __gameID_isset = YES;
  __playerID = playerID;
  __playerID_isset = YES;
  __abbreviation = [abbreviation retain];
  __abbreviation_isset = YES;
  __index = [index retain];
  __index_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gameID"])
  {
    __gameID = [decoder decodeInt32ForKey: @"gameID"];
    __gameID_isset = YES;
  }
  if ([decoder containsValueForKey: @"playerID"])
  {
    __playerID = [decoder decodeInt32ForKey: @"playerID"];
    __playerID_isset = YES;
  }
  if ([decoder containsValueForKey: @"abbreviation"])
  {
    __abbreviation = [[decoder decodeObjectForKey: @"abbreviation"] retain];
    __abbreviation_isset = YES;
  }
  if ([decoder containsValueForKey: @"index"])
  {
    __index = [[decoder decodeObjectForKey: @"index"] retain];
    __index_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gameID_isset)
  {
    [encoder encodeInt32: __gameID forKey: @"gameID"];
  }
  if (__playerID_isset)
  {
    [encoder encodeInt32: __playerID forKey: @"playerID"];
  }
  if (__abbreviation_isset)
  {
    [encoder encodeObject: __abbreviation forKey: @"abbreviation"];
  }
  if (__index_isset)
  {
    [encoder encodeObject: __index forKey: @"index"];
  }
}

- (void) dealloc
{
  [__abbreviation release];
  [__index release];
  [super dealloc];
}

- (int32_t) gameID {
  return __gameID;
}

- (void) setGameID: (int32_t) gameID {
  __gameID = gameID;
  __gameID_isset = YES;
}

- (BOOL) gameIDIsSet {
  return __gameID_isset;
}

- (void) unsetGameID {
  __gameID_isset = NO;
}

- (int32_t) playerID {
  return __playerID;
}

- (void) setPlayerID: (int32_t) playerID {
  __playerID = playerID;
  __playerID_isset = YES;
}

- (BOOL) playerIDIsSet {
  return __playerID_isset;
}

- (void) unsetPlayerID {
  __playerID_isset = NO;
}

- (NSString *) abbreviation {
  return [[__abbreviation retain] autorelease];
}

- (void) setAbbreviation: (NSString *) abbreviation {
  [abbreviation retain];
  [__abbreviation release];
  __abbreviation = abbreviation;
  __abbreviation_isset = YES;
}

- (BOOL) abbreviationIsSet {
  return __abbreviation_isset;
}

- (void) unsetAbbreviation {
  [__abbreviation release];
  __abbreviation = nil;
  __abbreviation_isset = NO;
}

- (NSString *) index {
  return [[__index retain] autorelease];
}

- (void) setIndex: (NSString *) index {
  [index retain];
  [__index release];
  __index = index;
  __index_isset = YES;
}

- (BOOL) indexIsSet {
  return __index_isset;
}

- (void) unsetIndex {
  [__index release];
  __index = nil;
  __index_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGameID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPlayerID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAbbreviation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIndex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"reveal_args"];
  if (__gameID_isset) {
    [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __gameID];
    [outProtocol writeFieldEnd];
  }
  if (__playerID_isset) {
    [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __playerID];
    [outProtocol writeFieldEnd];
  }
  if (__abbreviation_isset) {
    if (__abbreviation != nil) {
      [outProtocol writeFieldBeginWithName: @"abbreviation" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __abbreviation];
      [outProtocol writeFieldEnd];
    }
  }
  if (__index_isset) {
    if (__index != nil) {
      [outProtocol writeFieldBeginWithName: @"index" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __index];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"reveal_args("];
  [ms appendString: @"gameID:"];
  [ms appendFormat: @"%i", __gameID];
  [ms appendString: @",playerID:"];
  [ms appendFormat: @"%i", __playerID];
  [ms appendString: @",abbreviation:"];
  [ms appendFormat: @"\"%@\"", __abbreviation];
  [ms appendString: @",index:"];
  [ms appendFormat: @"\"%@\"", __index];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface event_args : NSObject <NSCoding> {
  NSString * __eventType;
  int32_t __gameID;
  int32_t __playerID;
  NSArray * __data;

  BOOL __eventType_isset;
  BOOL __gameID_isset;
  BOOL __playerID_isset;
  BOOL __data_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=eventType, setter=setEventType:) NSString * eventType;
@property (nonatomic, getter=gameID, setter=setGameID:) int32_t gameID;
@property (nonatomic, getter=playerID, setter=setPlayerID:) int32_t playerID;
@property (nonatomic, retain, getter=data, setter=setData:) NSArray * data;
#endif

- (id) initWithEventType: (NSString *) eventType gameID: (int32_t) gameID playerID: (int32_t) playerID data: (NSArray *) data;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) eventType;
- (void) setEventType: (NSString *) eventType;
- (BOOL) eventTypeIsSet;

- (int32_t) gameID;
- (void) setGameID: (int32_t) gameID;
- (BOOL) gameIDIsSet;

- (int32_t) playerID;
- (void) setPlayerID: (int32_t) playerID;
- (BOOL) playerIDIsSet;

- (NSArray *) data;
- (void) setData: (NSArray *) data;
- (BOOL) dataIsSet;

@end

@implementation event_args

- (id) initWithEventType: (NSString *) eventType gameID: (int32_t) gameID playerID: (int32_t) playerID data: (NSArray *) data
{
  self = [super init];
  __eventType = [eventType retain];
  __eventType_isset = YES;
  __gameID = gameID;
  __gameID_isset = YES;
  __playerID = playerID;
  __playerID_isset = YES;
  __data = [data retain];
  __data_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"eventType"])
  {
    __eventType = [[decoder decodeObjectForKey: @"eventType"] retain];
    __eventType_isset = YES;
  }
  if ([decoder containsValueForKey: @"gameID"])
  {
    __gameID = [decoder decodeInt32ForKey: @"gameID"];
    __gameID_isset = YES;
  }
  if ([decoder containsValueForKey: @"playerID"])
  {
    __playerID = [decoder decodeInt32ForKey: @"playerID"];
    __playerID_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain];
    __data_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__eventType_isset)
  {
    [encoder encodeObject: __eventType forKey: @"eventType"];
  }
  if (__gameID_isset)
  {
    [encoder encodeInt32: __gameID forKey: @"gameID"];
  }
  if (__playerID_isset)
  {
    [encoder encodeInt32: __playerID forKey: @"playerID"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
}

- (void) dealloc
{
  [__eventType release];
  [__data release];
  [super dealloc];
}

- (NSString *) eventType {
  return [[__eventType retain] autorelease];
}

- (void) setEventType: (NSString *) eventType {
  [eventType retain];
  [__eventType release];
  __eventType = eventType;
  __eventType_isset = YES;
}

- (BOOL) eventTypeIsSet {
  return __eventType_isset;
}

- (void) unsetEventType {
  [__eventType release];
  __eventType = nil;
  __eventType_isset = NO;
}

- (int32_t) gameID {
  return __gameID;
}

- (void) setGameID: (int32_t) gameID {
  __gameID = gameID;
  __gameID_isset = YES;
}

- (BOOL) gameIDIsSet {
  return __gameID_isset;
}

- (void) unsetGameID {
  __gameID_isset = NO;
}

- (int32_t) playerID {
  return __playerID;
}

- (void) setPlayerID: (int32_t) playerID {
  __playerID = playerID;
  __playerID_isset = YES;
}

- (BOOL) playerIDIsSet {
  return __playerID_isset;
}

- (void) unsetPlayerID {
  __playerID_isset = NO;
}

- (NSArray *) data {
  return [[__data retain] autorelease];
}

- (void) setData: (NSArray *) data {
  [data retain];
  [__data release];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEventType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGameID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPlayerID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            NSString * _elem7 = [inProtocol readString];
            [fieldValue addObject: _elem7];
          }
          [inProtocol readListEnd];
          [self setData: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"event_args"];
  if (__eventType_isset) {
    if (__eventType != nil) {
      [outProtocol writeFieldBeginWithName: @"eventType" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __eventType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gameID_isset) {
    [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __gameID];
    [outProtocol writeFieldEnd];
  }
  if (__playerID_isset) {
    [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __playerID];
    [outProtocol writeFieldEnd];
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__data count]];
        int i9;
        for (i9 = 0; i9 < [__data count]; i9++)
        {
          [outProtocol writeString: [__data objectAtIndex: i9]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"event_args("];
  [ms appendString: @"eventType:"];
  [ms appendFormat: @"\"%@\"", __eventType];
  [ms appendString: @",gameID:"];
  [ms appendFormat: @"%i", __gameID];
  [ms appendString: @",playerID:"];
  [ms appendFormat: @"%i", __playerID];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getEvents_args : NSObject <NSCoding> {
  int32_t __gameID;
  int32_t __sinceIndex;

  BOOL __gameID_isset;
  BOOL __sinceIndex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=gameID, setter=setGameID:) int32_t gameID;
@property (nonatomic, getter=sinceIndex, setter=setSinceIndex:) int32_t sinceIndex;
#endif

- (id) initWithGameID: (int32_t) gameID sinceIndex: (int32_t) sinceIndex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) gameID;
- (void) setGameID: (int32_t) gameID;
- (BOOL) gameIDIsSet;

- (int32_t) sinceIndex;
- (void) setSinceIndex: (int32_t) sinceIndex;
- (BOOL) sinceIndexIsSet;

@end

@implementation getEvents_args

- (id) initWithGameID: (int32_t) gameID sinceIndex: (int32_t) sinceIndex
{
  self = [super init];
  __gameID = gameID;
  __gameID_isset = YES;
  __sinceIndex = sinceIndex;
  __sinceIndex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"gameID"])
  {
    __gameID = [decoder decodeInt32ForKey: @"gameID"];
    __gameID_isset = YES;
  }
  if ([decoder containsValueForKey: @"sinceIndex"])
  {
    __sinceIndex = [decoder decodeInt32ForKey: @"sinceIndex"];
    __sinceIndex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__gameID_isset)
  {
    [encoder encodeInt32: __gameID forKey: @"gameID"];
  }
  if (__sinceIndex_isset)
  {
    [encoder encodeInt32: __sinceIndex forKey: @"sinceIndex"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) gameID {
  return __gameID;
}

- (void) setGameID: (int32_t) gameID {
  __gameID = gameID;
  __gameID_isset = YES;
}

- (BOOL) gameIDIsSet {
  return __gameID_isset;
}

- (void) unsetGameID {
  __gameID_isset = NO;
}

- (int32_t) sinceIndex {
  return __sinceIndex;
}

- (void) setSinceIndex: (int32_t) sinceIndex {
  __sinceIndex = sinceIndex;
  __sinceIndex_isset = YES;
}

- (BOOL) sinceIndexIsSet {
  return __sinceIndex_isset;
}

- (void) unsetSinceIndex {
  __sinceIndex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setGameID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSinceIndex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getEvents_args"];
  if (__gameID_isset) {
    [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __gameID];
    [outProtocol writeFieldEnd];
  }
  if (__sinceIndex_isset) {
    [outProtocol writeFieldBeginWithName: @"sinceIndex" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __sinceIndex];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getEvents_args("];
  [ms appendString: @"gameID:"];
  [ms appendFormat: @"%i", __gameID];
  [ms appendString: @",sinceIndex:"];
  [ms appendFormat: @"%i", __sinceIndex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetEvents_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation GetEvents_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            Event *_elem12 = [[Event alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetEvents_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i14;
        for (i14 = 0; i14 < [__success count]; i14++)
        {
          [[__success objectAtIndex: i14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetEvents_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface listDecks_args : NSObject <NSCoding> {
  NSString * __directory;

  BOOL __directory_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=directory, setter=setDirectory:) NSString * directory;
#endif

- (id) initWithDirectory: (NSString *) directory;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) directory;
- (void) setDirectory: (NSString *) directory;
- (BOOL) directoryIsSet;

@end

@implementation listDecks_args

- (id) initWithDirectory: (NSString *) directory
{
  self = [super init];
  __directory = [directory retain];
  __directory_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"directory"])
  {
    __directory = [[decoder decodeObjectForKey: @"directory"] retain];
    __directory_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__directory_isset)
  {
    [encoder encodeObject: __directory forKey: @"directory"];
  }
}

- (void) dealloc
{
  [__directory release];
  [super dealloc];
}

- (NSString *) directory {
  return [[__directory retain] autorelease];
}

- (void) setDirectory: (NSString *) directory {
  [directory retain];
  [__directory release];
  __directory = directory;
  __directory_isset = YES;
}

- (BOOL) directoryIsSet {
  return __directory_isset;
}

- (void) unsetDirectory {
  [__directory release];
  __directory = nil;
  __directory_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDirectory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"listDecks_args"];
  if (__directory_isset) {
    if (__directory != nil) {
      [outProtocol writeFieldBeginWithName: @"directory" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __directory];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"listDecks_args("];
  [ms appendString: @"directory:"];
  [ms appendFormat: @"\"%@\"", __directory];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface ListDecks_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation ListDecks_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            NSString * _elem17 = [inProtocol readString];
            [fieldValue addObject: _elem17];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ListDecks_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__success count]];
        int i19;
        for (i19 = 0; i19 < [__success count]; i19++)
        {
          [outProtocol writeString: [__success objectAtIndex: i19]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ListDecks_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getDeck_args : NSObject <NSCoding> {
  NSString * __directory;
  NSString * __deckName;

  BOOL __directory_isset;
  BOOL __deckName_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=directory, setter=setDirectory:) NSString * directory;
@property (nonatomic, retain, getter=deckName, setter=setDeckName:) NSString * deckName;
#endif

- (id) initWithDirectory: (NSString *) directory deckName: (NSString *) deckName;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) directory;
- (void) setDirectory: (NSString *) directory;
- (BOOL) directoryIsSet;

- (NSString *) deckName;
- (void) setDeckName: (NSString *) deckName;
- (BOOL) deckNameIsSet;

@end

@implementation getDeck_args

- (id) initWithDirectory: (NSString *) directory deckName: (NSString *) deckName
{
  self = [super init];
  __directory = [directory retain];
  __directory_isset = YES;
  __deckName = [deckName retain];
  __deckName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"directory"])
  {
    __directory = [[decoder decodeObjectForKey: @"directory"] retain];
    __directory_isset = YES;
  }
  if ([decoder containsValueForKey: @"deckName"])
  {
    __deckName = [[decoder decodeObjectForKey: @"deckName"] retain];
    __deckName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__directory_isset)
  {
    [encoder encodeObject: __directory forKey: @"directory"];
  }
  if (__deckName_isset)
  {
    [encoder encodeObject: __deckName forKey: @"deckName"];
  }
}

- (void) dealloc
{
  [__directory release];
  [__deckName release];
  [super dealloc];
}

- (NSString *) directory {
  return [[__directory retain] autorelease];
}

- (void) setDirectory: (NSString *) directory {
  [directory retain];
  [__directory release];
  __directory = directory;
  __directory_isset = YES;
}

- (BOOL) directoryIsSet {
  return __directory_isset;
}

- (void) unsetDirectory {
  [__directory release];
  __directory = nil;
  __directory_isset = NO;
}

- (NSString *) deckName {
  return [[__deckName retain] autorelease];
}

- (void) setDeckName: (NSString *) deckName {
  [deckName retain];
  [__deckName release];
  __deckName = deckName;
  __deckName_isset = YES;
}

- (BOOL) deckNameIsSet {
  return __deckName_isset;
}

- (void) unsetDeckName {
  [__deckName release];
  __deckName = nil;
  __deckName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDirectory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeckName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getDeck_args"];
  if (__directory_isset) {
    if (__directory != nil) {
      [outProtocol writeFieldBeginWithName: @"directory" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __directory];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deckName_isset) {
    if (__deckName != nil) {
      [outProtocol writeFieldBeginWithName: @"deckName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __deckName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getDeck_args("];
  [ms appendString: @"directory:"];
  [ms appendFormat: @"\"%@\"", __directory];
  [ms appendString: @",deckName:"];
  [ms appendFormat: @"\"%@\"", __deckName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetDeck_result : NSObject <NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) success;
- (void) setSuccess: (NSString *) success;
- (BOOL) successIsSet;

@end

@implementation GetDeck_result

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSString *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSString *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDeck_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetDeck_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface saveDeck_args : NSObject <NSCoding> {
  NSString * __deckName;
  NSString * __deck;
  NSString * __directory;

  BOOL __deckName_isset;
  BOOL __deck_isset;
  BOOL __directory_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=deckName, setter=setDeckName:) NSString * deckName;
@property (nonatomic, retain, getter=deck, setter=setDeck:) NSString * deck;
@property (nonatomic, retain, getter=directory, setter=setDirectory:) NSString * directory;
#endif

- (id) initWithDeckName: (NSString *) deckName deck: (NSString *) deck directory: (NSString *) directory;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) deckName;
- (void) setDeckName: (NSString *) deckName;
- (BOOL) deckNameIsSet;

- (NSString *) deck;
- (void) setDeck: (NSString *) deck;
- (BOOL) deckIsSet;

- (NSString *) directory;
- (void) setDirectory: (NSString *) directory;
- (BOOL) directoryIsSet;

@end

@implementation saveDeck_args

- (id) initWithDeckName: (NSString *) deckName deck: (NSString *) deck directory: (NSString *) directory
{
  self = [super init];
  __deckName = [deckName retain];
  __deckName_isset = YES;
  __deck = [deck retain];
  __deck_isset = YES;
  __directory = [directory retain];
  __directory_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"deckName"])
  {
    __deckName = [[decoder decodeObjectForKey: @"deckName"] retain];
    __deckName_isset = YES;
  }
  if ([decoder containsValueForKey: @"deck"])
  {
    __deck = [[decoder decodeObjectForKey: @"deck"] retain];
    __deck_isset = YES;
  }
  if ([decoder containsValueForKey: @"directory"])
  {
    __directory = [[decoder decodeObjectForKey: @"directory"] retain];
    __directory_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__deckName_isset)
  {
    [encoder encodeObject: __deckName forKey: @"deckName"];
  }
  if (__deck_isset)
  {
    [encoder encodeObject: __deck forKey: @"deck"];
  }
  if (__directory_isset)
  {
    [encoder encodeObject: __directory forKey: @"directory"];
  }
}

- (void) dealloc
{
  [__deckName release];
  [__deck release];
  [__directory release];
  [super dealloc];
}

- (NSString *) deckName {
  return [[__deckName retain] autorelease];
}

- (void) setDeckName: (NSString *) deckName {
  [deckName retain];
  [__deckName release];
  __deckName = deckName;
  __deckName_isset = YES;
}

- (BOOL) deckNameIsSet {
  return __deckName_isset;
}

- (void) unsetDeckName {
  [__deckName release];
  __deckName = nil;
  __deckName_isset = NO;
}

- (NSString *) deck {
  return [[__deck retain] autorelease];
}

- (void) setDeck: (NSString *) deck {
  [deck retain];
  [__deck release];
  __deck = deck;
  __deck_isset = YES;
}

- (BOOL) deckIsSet {
  return __deck_isset;
}

- (void) unsetDeck {
  [__deck release];
  __deck = nil;
  __deck_isset = NO;
}

- (NSString *) directory {
  return [[__directory retain] autorelease];
}

- (void) setDirectory: (NSString *) directory {
  [directory retain];
  [__directory release];
  __directory = directory;
  __directory_isset = YES;
}

- (BOOL) directoryIsSet {
  return __directory_isset;
}

- (void) unsetDirectory {
  [__directory release];
  __directory = nil;
  __directory_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeckName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeck: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDirectory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"saveDeck_args"];
  if (__deckName_isset) {
    if (__deckName != nil) {
      [outProtocol writeFieldBeginWithName: @"deckName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __deckName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__deck_isset) {
    if (__deck != nil) {
      [outProtocol writeFieldBeginWithName: @"deck" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __deck];
      [outProtocol writeFieldEnd];
    }
  }
  if (__directory_isset) {
    if (__directory != nil) {
      [outProtocol writeFieldBeginWithName: @"directory" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __directory];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"saveDeck_args("];
  [ms appendString: @"deckName:"];
  [ms appendFormat: @"\"%@\"", __deckName];
  [ms appendString: @",deck:"];
  [ms appendFormat: @"\"%@\"", __deck];
  [ms appendString: @",directory:"];
  [ms appendFormat: @"\"%@\"", __directory];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface VERSION_args : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation VERSION_args

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VERSION_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"VERSION_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface VERSION_result : NSObject <NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) success;
- (void) setSuccess: (NSString *) success;
- (BOOL) successIsSet;

@end

@implementation VERSION_result

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSString *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSString *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VERSION_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"VERSION_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation PTGClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_registerPlayer: (int32_t) gameID : (NSString *) playerName : (int32_t) team
{
  [outProtocol writeMessageBeginWithName: @"registerPlayer" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"registerPlayer_args"];
  [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: gameID];
  [outProtocol writeFieldEnd];
  if (playerName != nil)  {
    [outProtocol writeFieldBeginWithName: @"playerName" type: TType_STRING fieldID: 2];
    [outProtocol writeString: playerName];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"team" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: team];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int32_t) recv_registerPlayer
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  RegisterPlayer_result * result = [[[RegisterPlayer_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"registerPlayer failed: unknown result"];
}

- (int32_t) registerPlayer: (int32_t) gameID : (NSString *) playerName : (int32_t) team
{
  [self send_registerPlayer: gameID : playerName : team];
  return [self recv_registerPlayer];
}

- (void) send_unregisterPlayer: (int32_t) gameID : (int32_t) playerID
{
  [outProtocol writeMessageBeginWithName: @"unregisterPlayer" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"unregisterPlayer_args"];
  [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: gameID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: playerID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) unregisterPlayer: (int32_t) gameID : (int32_t) playerID
{
  [self send_unregisterPlayer: gameID : playerID];
}

- (void) send_setDeck: (int32_t) gameID : (int32_t) playerID : (NSString *) deckName : (int32_t) deckSize
{
  [outProtocol writeMessageBeginWithName: @"setDeck" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"setDeck_args"];
  [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: gameID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: playerID];
  [outProtocol writeFieldEnd];
  if (deckName != nil)  {
    [outProtocol writeFieldBeginWithName: @"deckName" type: TType_STRING fieldID: 3];
    [outProtocol writeString: deckName];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"deckSize" type: TType_I32 fieldID: 4];
  [outProtocol writeI32: deckSize];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) setDeck: (int32_t) gameID : (int32_t) playerID : (NSString *) deckName : (int32_t) deckSize
{
  [self send_setDeck: gameID : playerID : deckName : deckSize];
}

- (void) send_moveCard: (int32_t) gameID : (int32_t) playerID : (NSString *) abbreviation : (NSString *) index : (int32_t) originalPosition : (int32_t) newPosition : (BOOL) tapped
{
  [outProtocol writeMessageBeginWithName: @"moveCard" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"moveCard_args"];
  [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: gameID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: playerID];
  [outProtocol writeFieldEnd];
  if (abbreviation != nil)  {
    [outProtocol writeFieldBeginWithName: @"abbreviation" type: TType_STRING fieldID: 3];
    [outProtocol writeString: abbreviation];
    [outProtocol writeFieldEnd];
  }
  if (index != nil)  {
    [outProtocol writeFieldBeginWithName: @"index" type: TType_STRING fieldID: 4];
    [outProtocol writeString: index];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"originalPosition" type: TType_I32 fieldID: 5];
  [outProtocol writeI32: originalPosition];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"newPosition" type: TType_I32 fieldID: 6];
  [outProtocol writeI32: newPosition];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"tapped" type: TType_BOOL fieldID: 7];
  [outProtocol writeBool: tapped];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) moveCard: (int32_t) gameID : (int32_t) playerID : (NSString *) abbreviation : (NSString *) index : (int32_t) originalPosition : (int32_t) newPosition : (BOOL) tapped
{
  [self send_moveCard: gameID : playerID : abbreviation : index : originalPosition : newPosition : tapped];
}

- (void) send_removeCardFrom: (int32_t) gameID : (int32_t) playerID : (int32_t) zone : (int32_t) position
{
  [outProtocol writeMessageBeginWithName: @"removeCardFrom" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"removeCardFrom_args"];
  [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: gameID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: playerID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"zone" type: TType_I32 fieldID: 4];
  [outProtocol writeI32: zone];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"position" type: TType_I32 fieldID: 5];
  [outProtocol writeI32: position];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) removeCardFrom: (int32_t) gameID : (int32_t) playerID : (int32_t) zone : (int32_t) position
{
  [self send_removeCardFrom: gameID : playerID : zone : position];
}

- (void) send_addCardTo: (int32_t) gameID : (int32_t) playerID : (NSString *) cardString : (int32_t) zone : (int32_t) position
{
  [outProtocol writeMessageBeginWithName: @"addCardTo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"addCardTo_args"];
  [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: gameID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: playerID];
  [outProtocol writeFieldEnd];
  if (cardString != nil)  {
    [outProtocol writeFieldBeginWithName: @"cardString" type: TType_STRING fieldID: 3];
    [outProtocol writeString: cardString];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"zone" type: TType_I32 fieldID: 4];
  [outProtocol writeI32: zone];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"position" type: TType_I32 fieldID: 5];
  [outProtocol writeI32: position];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) addCardTo: (int32_t) gameID : (int32_t) playerID : (NSString *) cardString : (int32_t) zone : (int32_t) position
{
  [self send_addCardTo: gameID : playerID : cardString : zone : position];
}

- (void) send_setCardTo: (int32_t) gameID : (int32_t) playerID : (NSString *) cardString : (int32_t) zone : (int32_t) position
{
  [outProtocol writeMessageBeginWithName: @"setCardTo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"setCardTo_args"];
  [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: gameID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: playerID];
  [outProtocol writeFieldEnd];
  if (cardString != nil)  {
    [outProtocol writeFieldBeginWithName: @"cardString" type: TType_STRING fieldID: 3];
    [outProtocol writeString: cardString];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"zone" type: TType_I32 fieldID: 4];
  [outProtocol writeI32: zone];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"position" type: TType_I32 fieldID: 5];
  [outProtocol writeI32: position];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) setCardTo: (int32_t) gameID : (int32_t) playerID : (NSString *) cardString : (int32_t) zone : (int32_t) position
{
  [self send_setCardTo: gameID : playerID : cardString : zone : position];
}

- (void) send_setLife: (int32_t) gameID : (int32_t) playerID : (int32_t) life
{
  [outProtocol writeMessageBeginWithName: @"setLife" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"setLife_args"];
  [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: gameID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: playerID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"life" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: life];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) setLife: (int32_t) gameID : (int32_t) playerID : (int32_t) life
{
  [self send_setLife: gameID : playerID : life];
}

- (void) send_setPoison: (int32_t) gameID : (int32_t) playerID : (int32_t) posion
{
  [outProtocol writeMessageBeginWithName: @"setPoison" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"setPoison_args"];
  [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: gameID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: playerID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"posion" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: posion];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) setPoison: (int32_t) gameID : (int32_t) playerID : (int32_t) posion
{
  [self send_setPoison: gameID : playerID : posion];
}

- (void) send_reveal: (int32_t) gameID : (int32_t) playerID : (NSString *) abbreviation : (NSString *) index
{
  [outProtocol writeMessageBeginWithName: @"reveal" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"reveal_args"];
  [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: gameID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: playerID];
  [outProtocol writeFieldEnd];
  if (abbreviation != nil)  {
    [outProtocol writeFieldBeginWithName: @"abbreviation" type: TType_STRING fieldID: 3];
    [outProtocol writeString: abbreviation];
    [outProtocol writeFieldEnd];
  }
  if (index != nil)  {
    [outProtocol writeFieldBeginWithName: @"index" type: TType_STRING fieldID: 4];
    [outProtocol writeString: index];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) reveal: (int32_t) gameID : (int32_t) playerID : (NSString *) abbreviation : (NSString *) index
{
  [self send_reveal: gameID : playerID : abbreviation : index];
}

- (void) send_event: (NSString *) eventType : (int32_t) gameID : (int32_t) playerID : (NSArray *) data
{
  [outProtocol writeMessageBeginWithName: @"event" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"event_args"];
  if (eventType != nil)  {
    [outProtocol writeFieldBeginWithName: @"eventType" type: TType_STRING fieldID: 1];
    [outProtocol writeString: eventType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: gameID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"playerID" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: playerID];
  [outProtocol writeFieldEnd];
  if (data != nil)  {
    [outProtocol writeFieldBeginWithName: @"data" type: TType_LIST fieldID: 4];
    {
      [outProtocol writeListBeginWithElementType: TType_STRING size: [data count]];
      int i21;
      for (i21 = 0; i21 < [data count]; i21++)
      {
        [outProtocol writeString: [data objectAtIndex: i21]];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) event: (NSString *) eventType : (int32_t) gameID : (int32_t) playerID : (NSArray *) data
{
  [self send_event: eventType : gameID : playerID : data];
}

- (void) send_getEvents: (int32_t) gameID : (int32_t) sinceIndex
{
  [outProtocol writeMessageBeginWithName: @"getEvents" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getEvents_args"];
  [outProtocol writeFieldBeginWithName: @"gameID" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: gameID];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"sinceIndex" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: sinceIndex];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_getEvents
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetEvents_result * result = [[[GetEvents_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getEvents failed: unknown result"];
}

- (NSArray *) getEvents: (int32_t) gameID : (int32_t) sinceIndex
{
  [self send_getEvents: gameID : sinceIndex];
  return [self recv_getEvents];
}

- (void) send_listDecks: (NSString *) directory
{
  [outProtocol writeMessageBeginWithName: @"listDecks" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"listDecks_args"];
  if (directory != nil)  {
    [outProtocol writeFieldBeginWithName: @"directory" type: TType_STRING fieldID: 1];
    [outProtocol writeString: directory];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_listDecks
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ListDecks_result * result = [[[ListDecks_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"listDecks failed: unknown result"];
}

- (NSArray *) listDecks: (NSString *) directory
{
  [self send_listDecks: directory];
  return [self recv_listDecks];
}

- (void) send_getDeck: (NSString *) directory : (NSString *) deckName
{
  [outProtocol writeMessageBeginWithName: @"getDeck" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getDeck_args"];
  if (directory != nil)  {
    [outProtocol writeFieldBeginWithName: @"directory" type: TType_STRING fieldID: 1];
    [outProtocol writeString: directory];
    [outProtocol writeFieldEnd];
  }
  if (deckName != nil)  {
    [outProtocol writeFieldBeginWithName: @"deckName" type: TType_STRING fieldID: 2];
    [outProtocol writeString: deckName];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_getDeck
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetDeck_result * result = [[[GetDeck_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getDeck failed: unknown result"];
}

- (NSString *) getDeck: (NSString *) directory : (NSString *) deckName
{
  [self send_getDeck: directory : deckName];
  return [self recv_getDeck];
}

- (void) send_saveDeck: (NSString *) deckName : (NSString *) deck : (NSString *) directory
{
  [outProtocol writeMessageBeginWithName: @"saveDeck" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"saveDeck_args"];
  if (deckName != nil)  {
    [outProtocol writeFieldBeginWithName: @"deckName" type: TType_STRING fieldID: 1];
    [outProtocol writeString: deckName];
    [outProtocol writeFieldEnd];
  }
  if (deck != nil)  {
    [outProtocol writeFieldBeginWithName: @"deck" type: TType_STRING fieldID: 2];
    [outProtocol writeString: deck];
    [outProtocol writeFieldEnd];
  }
  if (directory != nil)  {
    [outProtocol writeFieldBeginWithName: @"directory" type: TType_STRING fieldID: 3];
    [outProtocol writeString: directory];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) saveDeck: (NSString *) deckName : (NSString *) deck : (NSString *) directory
{
  [self send_saveDeck: deckName : deck : directory];
}

- (void) send_VERSION
{
  [outProtocol writeMessageBeginWithName: @"VERSION" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"VERSION_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_VERSION
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  VERSION_result * result = [[[VERSION_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"VERSION failed: unknown result"];
}

- (NSString *) VERSION
{
  [self send_VERSION];
  return [self recv_VERSION];
}

@end

@implementation PTGProcessor

- (id) initWithPTG: (id <PTG>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_registerPlayer_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"registerPlayer"];
  }
  {
    SEL s = @selector(process_unregisterPlayer_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"unregisterPlayer"];
  }
  {
    SEL s = @selector(process_setDeck_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"setDeck"];
  }
  {
    SEL s = @selector(process_moveCard_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"moveCard"];
  }
  {
    SEL s = @selector(process_removeCardFrom_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"removeCardFrom"];
  }
  {
    SEL s = @selector(process_addCardTo_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"addCardTo"];
  }
  {
    SEL s = @selector(process_setCardTo_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"setCardTo"];
  }
  {
    SEL s = @selector(process_setLife_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"setLife"];
  }
  {
    SEL s = @selector(process_setPoison_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"setPoison"];
  }
  {
    SEL s = @selector(process_reveal_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"reveal"];
  }
  {
    SEL s = @selector(process_event_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"event"];
  }
  {
    SEL s = @selector(process_getEvents_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getEvents"];
  }
  {
    SEL s = @selector(process_listDecks_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"listDecks"];
  }
  {
    SEL s = @selector(process_getDeck_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getDeck"];
  }
  {
    SEL s = @selector(process_saveDeck_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"saveDeck"];
  }
  {
    SEL s = @selector(process_VERSION_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"VERSION"];
  }
  return self;
}

- (id<PTG>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_registerPlayer_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  registerPlayer_args * args = [[registerPlayer_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  RegisterPlayer_result * result = [[RegisterPlayer_result alloc] init];
  [result setSuccess: [mService registerPlayer: [args gameID]: [args playerName]: [args team]]];
  [outProtocol writeMessageBeginWithName: @"registerPlayer"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getEvents_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getEvents_args * args = [[getEvents_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetEvents_result * result = [[GetEvents_result alloc] init];
  [result setSuccess: [mService getEvents: [args gameID]: [args sinceIndex]]];
  [outProtocol writeMessageBeginWithName: @"getEvents"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_listDecks_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  listDecks_args * args = [[listDecks_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  ListDecks_result * result = [[ListDecks_result alloc] init];
  [result setSuccess: [mService listDecks: [args directory]]];
  [outProtocol writeMessageBeginWithName: @"listDecks"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getDeck_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getDeck_args * args = [[getDeck_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetDeck_result * result = [[GetDeck_result alloc] init];
  [result setSuccess: [mService getDeck: [args directory]: [args deckName]]];
  [outProtocol writeMessageBeginWithName: @"getDeck"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_VERSION_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  VERSION_args * args = [[VERSION_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  VERSION_result * result = [[VERSION_result alloc] init];
  [result setSuccess: [mService VERSION]];
  [outProtocol writeMessageBeginWithName: @"VERSION"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

