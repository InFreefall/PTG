/**
 * Autogenerated by Thrift Compiler (0.7.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>


#import "HandyPTG.h"


@implementation HandyPTGConstants
+ (void) initialize {
}
@end

@implementation HPTGEvent

- (id) initWithIndex: (int32_t) index type: (NSString *) type sender: (int32_t) sender data: (NSArray *) data senderName: (NSString *) senderName
{
  self = [super init];
  __index = index;
  __index_isset = YES;
  __type = [type retain];
  __type_isset = YES;
  __sender = sender;
  __sender_isset = YES;
  __data = [data retain];
  __data_isset = YES;
  __senderName = [senderName retain];
  __senderName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"index"])
  {
    __index = [decoder decodeInt32ForKey: @"index"];
    __index_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [[decoder decodeObjectForKey: @"type"] retain];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"sender"])
  {
    __sender = [decoder decodeInt32ForKey: @"sender"];
    __sender_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain];
    __data_isset = YES;
  }
  if ([decoder containsValueForKey: @"senderName"])
  {
    __senderName = [[decoder decodeObjectForKey: @"senderName"] retain];
    __senderName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__index_isset)
  {
    [encoder encodeInt32: __index forKey: @"index"];
  }
  if (__type_isset)
  {
    [encoder encodeObject: __type forKey: @"type"];
  }
  if (__sender_isset)
  {
    [encoder encodeInt32: __sender forKey: @"sender"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
  if (__senderName_isset)
  {
    [encoder encodeObject: __senderName forKey: @"senderName"];
  }
}

- (void) dealloc
{
  [__type release];
  [__data release];
  [__senderName release];
  [super dealloc];
}

- (int32_t) index {
  return __index;
}

- (void) setIndex: (int32_t) index {
  __index = index;
  __index_isset = YES;
}

- (BOOL) indexIsSet {
  return __index_isset;
}

- (void) unsetIndex {
  __index_isset = NO;
}

- (NSString *) type {
  return [[__type retain] autorelease];
}

- (void) setType: (NSString *) type {
  [type retain];
  [__type release];
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  [__type release];
  __type = nil;
  __type_isset = NO;
}

- (int32_t) sender {
  return __sender;
}

- (void) setSender: (int32_t) sender {
  __sender = sender;
  __sender_isset = YES;
}

- (BOOL) senderIsSet {
  return __sender_isset;
}

- (void) unsetSender {
  __sender_isset = NO;
}

- (NSArray *) data {
  return [[__data retain] autorelease];
}

- (void) setData: (NSArray *) data {
  [data retain];
  [__data release];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release];
  __data = nil;
  __data_isset = NO;
}

- (NSString *) senderName {
  return [[__senderName retain] autorelease];
}

- (void) setSenderName: (NSString *) senderName {
  [senderName retain];
  [__senderName release];
  __senderName = senderName;
  __senderName_isset = YES;
}

- (BOOL) senderNameIsSet {
  return __senderName_isset;
}

- (void) unsetSenderName {
  [__senderName release];
  __senderName = nil;
  __senderName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIndex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setData: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSenderName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HPTGEvent"];
  if (__index_isset) {
    [outProtocol writeFieldBeginWithName: @"index" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __index];
    [outProtocol writeFieldEnd];
  }
  if (__type_isset) {
    if (__type != nil) {
      [outProtocol writeFieldBeginWithName: @"type" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __type];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sender_isset) {
    [outProtocol writeFieldBeginWithName: @"sender" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __sender];
    [outProtocol writeFieldEnd];
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__data count]];
        int i4;
        for (i4 = 0; i4 < [__data count]; i4++)
        {
          [outProtocol writeString: [__data objectAtIndex: i4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__senderName_isset) {
    if (__senderName != nil) {
      [outProtocol writeFieldBeginWithName: @"senderName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __senderName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HPTGEvent("];
  [ms appendString: @"index:"];
  [ms appendFormat: @"%i", __index];
  [ms appendString: @",type:"];
  [ms appendFormat: @"\"%@\"", __type];
  [ms appendString: @",sender:"];
  [ms appendFormat: @"%i", __sender];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @",senderName:"];
  [ms appendFormat: @"\"%@\"", __senderName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface HPTGgetEvents_args : NSObject <NSCoding> {
  int32_t __sinceIndex;

  BOOL __sinceIndex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=sinceIndex, setter=setSinceIndex:) int32_t sinceIndex;
#endif

- (id) initWithSinceIndex: (int32_t) sinceIndex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) sinceIndex;
- (void) setSinceIndex: (int32_t) sinceIndex;
- (BOOL) sinceIndexIsSet;

@end

@implementation HPTGgetEvents_args

- (id) initWithSinceIndex: (int32_t) sinceIndex
{
  self = [super init];
  __sinceIndex = sinceIndex;
  __sinceIndex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sinceIndex"])
  {
    __sinceIndex = [decoder decodeInt32ForKey: @"sinceIndex"];
    __sinceIndex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sinceIndex_isset)
  {
    [encoder encodeInt32: __sinceIndex forKey: @"sinceIndex"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) sinceIndex {
  return __sinceIndex;
}

- (void) setSinceIndex: (int32_t) sinceIndex {
  __sinceIndex = sinceIndex;
  __sinceIndex_isset = YES;
}

- (BOOL) sinceIndexIsSet {
  return __sinceIndex_isset;
}

- (void) unsetSinceIndex {
  __sinceIndex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSinceIndex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HPTGgetEvents_args"];
  if (__sinceIndex_isset) {
    [outProtocol writeFieldBeginWithName: @"sinceIndex" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __sinceIndex];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HPTGgetEvents_args("];
  [ms appendString: @"sinceIndex:"];
  [ms appendFormat: @"%i", __sinceIndex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface HPTGgetEvents_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation HPTGgetEvents_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            HPTGEvent *_elem7 = [[HPTGEvent alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HPTGgetEvents_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i9;
        for (i9 = 0; i9 < [__success count]; i9++)
        {
          [[__success objectAtIndex: i9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HPTGgetEvents_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface HPTGdrawCard_args : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation HPTGdrawCard_args

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HPTGdrawCard_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HPTGdrawCard_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface HPTGdrawCard_result : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation HPTGdrawCard_result

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HPTGdrawCard_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HPTGdrawCard_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface HPTGplayCard_args : NSObject <NSCoding> {
  NSString * __abbreviation;
  NSString * __index;

  BOOL __abbreviation_isset;
  BOOL __index_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=abbreviation, setter=setAbbreviation:) NSString * abbreviation;
@property (nonatomic, retain, getter=index, setter=setIndex:) NSString * index;
#endif

- (id) initWithAbbreviation: (NSString *) abbreviation index: (NSString *) index;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) abbreviation;
- (void) setAbbreviation: (NSString *) abbreviation;
- (BOOL) abbreviationIsSet;

- (NSString *) index;
- (void) setIndex: (NSString *) index;
- (BOOL) indexIsSet;

@end

@implementation HPTGplayCard_args

- (id) initWithAbbreviation: (NSString *) abbreviation index: (NSString *) index
{
  self = [super init];
  __abbreviation = [abbreviation retain];
  __abbreviation_isset = YES;
  __index = [index retain];
  __index_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"abbreviation"])
  {
    __abbreviation = [[decoder decodeObjectForKey: @"abbreviation"] retain];
    __abbreviation_isset = YES;
  }
  if ([decoder containsValueForKey: @"index"])
  {
    __index = [[decoder decodeObjectForKey: @"index"] retain];
    __index_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__abbreviation_isset)
  {
    [encoder encodeObject: __abbreviation forKey: @"abbreviation"];
  }
  if (__index_isset)
  {
    [encoder encodeObject: __index forKey: @"index"];
  }
}

- (void) dealloc
{
  [__abbreviation release];
  [__index release];
  [super dealloc];
}

- (NSString *) abbreviation {
  return [[__abbreviation retain] autorelease];
}

- (void) setAbbreviation: (NSString *) abbreviation {
  [abbreviation retain];
  [__abbreviation release];
  __abbreviation = abbreviation;
  __abbreviation_isset = YES;
}

- (BOOL) abbreviationIsSet {
  return __abbreviation_isset;
}

- (void) unsetAbbreviation {
  [__abbreviation release];
  __abbreviation = nil;
  __abbreviation_isset = NO;
}

- (NSString *) index {
  return [[__index retain] autorelease];
}

- (void) setIndex: (NSString *) index {
  [index retain];
  [__index release];
  __index = index;
  __index_isset = YES;
}

- (BOOL) indexIsSet {
  return __index_isset;
}

- (void) unsetIndex {
  [__index release];
  __index = nil;
  __index_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAbbreviation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIndex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HPTGplayCard_args"];
  if (__abbreviation_isset) {
    if (__abbreviation != nil) {
      [outProtocol writeFieldBeginWithName: @"abbreviation" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __abbreviation];
      [outProtocol writeFieldEnd];
    }
  }
  if (__index_isset) {
    if (__index != nil) {
      [outProtocol writeFieldBeginWithName: @"index" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __index];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HPTGplayCard_args("];
  [ms appendString: @"abbreviation:"];
  [ms appendFormat: @"\"%@\"", __abbreviation];
  [ms appendString: @",index:"];
  [ms appendFormat: @"\"%@\"", __index];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface HPTGplayCard_result : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation HPTGplayCard_result

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HPTGplayCard_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HPTGplayCard_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface HPTGlandCard_args : NSObject <NSCoding> {
  NSString * __abbreviation;
  NSString * __index;

  BOOL __abbreviation_isset;
  BOOL __index_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=abbreviation, setter=setAbbreviation:) NSString * abbreviation;
@property (nonatomic, retain, getter=index, setter=setIndex:) NSString * index;
#endif

- (id) initWithAbbreviation: (NSString *) abbreviation index: (NSString *) index;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) abbreviation;
- (void) setAbbreviation: (NSString *) abbreviation;
- (BOOL) abbreviationIsSet;

- (NSString *) index;
- (void) setIndex: (NSString *) index;
- (BOOL) indexIsSet;

@end

@implementation HPTGlandCard_args

- (id) initWithAbbreviation: (NSString *) abbreviation index: (NSString *) index
{
  self = [super init];
  __abbreviation = [abbreviation retain];
  __abbreviation_isset = YES;
  __index = [index retain];
  __index_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"abbreviation"])
  {
    __abbreviation = [[decoder decodeObjectForKey: @"abbreviation"] retain];
    __abbreviation_isset = YES;
  }
  if ([decoder containsValueForKey: @"index"])
  {
    __index = [[decoder decodeObjectForKey: @"index"] retain];
    __index_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__abbreviation_isset)
  {
    [encoder encodeObject: __abbreviation forKey: @"abbreviation"];
  }
  if (__index_isset)
  {
    [encoder encodeObject: __index forKey: @"index"];
  }
}

- (void) dealloc
{
  [__abbreviation release];
  [__index release];
  [super dealloc];
}

- (NSString *) abbreviation {
  return [[__abbreviation retain] autorelease];
}

- (void) setAbbreviation: (NSString *) abbreviation {
  [abbreviation retain];
  [__abbreviation release];
  __abbreviation = abbreviation;
  __abbreviation_isset = YES;
}

- (BOOL) abbreviationIsSet {
  return __abbreviation_isset;
}

- (void) unsetAbbreviation {
  [__abbreviation release];
  __abbreviation = nil;
  __abbreviation_isset = NO;
}

- (NSString *) index {
  return [[__index retain] autorelease];
}

- (void) setIndex: (NSString *) index {
  [index retain];
  [__index release];
  __index = index;
  __index_isset = YES;
}

- (BOOL) indexIsSet {
  return __index_isset;
}

- (void) unsetIndex {
  [__index release];
  __index = nil;
  __index_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAbbreviation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIndex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HPTGlandCard_args"];
  if (__abbreviation_isset) {
    if (__abbreviation != nil) {
      [outProtocol writeFieldBeginWithName: @"abbreviation" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __abbreviation];
      [outProtocol writeFieldEnd];
    }
  }
  if (__index_isset) {
    if (__index != nil) {
      [outProtocol writeFieldBeginWithName: @"index" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __index];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HPTGlandCard_args("];
  [ms appendString: @"abbreviation:"];
  [ms appendFormat: @"\"%@\"", __abbreviation];
  [ms appendString: @",index:"];
  [ms appendFormat: @"\"%@\"", __index];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface HPTGlandCard_result : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation HPTGlandCard_result

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HPTGlandCard_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HPTGlandCard_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface HPTGdiscardCard_args : NSObject <NSCoding> {
  NSString * __abbreviation;
  NSString * __index;

  BOOL __abbreviation_isset;
  BOOL __index_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=abbreviation, setter=setAbbreviation:) NSString * abbreviation;
@property (nonatomic, retain, getter=index, setter=setIndex:) NSString * index;
#endif

- (id) initWithAbbreviation: (NSString *) abbreviation index: (NSString *) index;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) abbreviation;
- (void) setAbbreviation: (NSString *) abbreviation;
- (BOOL) abbreviationIsSet;

- (NSString *) index;
- (void) setIndex: (NSString *) index;
- (BOOL) indexIsSet;

@end

@implementation HPTGdiscardCard_args

- (id) initWithAbbreviation: (NSString *) abbreviation index: (NSString *) index
{
  self = [super init];
  __abbreviation = [abbreviation retain];
  __abbreviation_isset = YES;
  __index = [index retain];
  __index_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"abbreviation"])
  {
    __abbreviation = [[decoder decodeObjectForKey: @"abbreviation"] retain];
    __abbreviation_isset = YES;
  }
  if ([decoder containsValueForKey: @"index"])
  {
    __index = [[decoder decodeObjectForKey: @"index"] retain];
    __index_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__abbreviation_isset)
  {
    [encoder encodeObject: __abbreviation forKey: @"abbreviation"];
  }
  if (__index_isset)
  {
    [encoder encodeObject: __index forKey: @"index"];
  }
}

- (void) dealloc
{
  [__abbreviation release];
  [__index release];
  [super dealloc];
}

- (NSString *) abbreviation {
  return [[__abbreviation retain] autorelease];
}

- (void) setAbbreviation: (NSString *) abbreviation {
  [abbreviation retain];
  [__abbreviation release];
  __abbreviation = abbreviation;
  __abbreviation_isset = YES;
}

- (BOOL) abbreviationIsSet {
  return __abbreviation_isset;
}

- (void) unsetAbbreviation {
  [__abbreviation release];
  __abbreviation = nil;
  __abbreviation_isset = NO;
}

- (NSString *) index {
  return [[__index retain] autorelease];
}

- (void) setIndex: (NSString *) index {
  [index retain];
  [__index release];
  __index = index;
  __index_isset = YES;
}

- (BOOL) indexIsSet {
  return __index_isset;
}

- (void) unsetIndex {
  [__index release];
  __index = nil;
  __index_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAbbreviation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIndex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HPTGdiscardCard_args"];
  if (__abbreviation_isset) {
    if (__abbreviation != nil) {
      [outProtocol writeFieldBeginWithName: @"abbreviation" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __abbreviation];
      [outProtocol writeFieldEnd];
    }
  }
  if (__index_isset) {
    if (__index != nil) {
      [outProtocol writeFieldBeginWithName: @"index" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __index];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HPTGdiscardCard_args("];
  [ms appendString: @"abbreviation:"];
  [ms appendFormat: @"\"%@\"", __abbreviation];
  [ms appendString: @",index:"];
  [ms appendFormat: @"\"%@\"", __index];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface HPTGdiscardCard_result : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation HPTGdiscardCard_result

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HPTGdiscardCard_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HPTGdiscardCard_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface HPTGgetCard_args : NSObject <NSCoding> {
  NSString * __abbreviation;
  NSString * __index;

  BOOL __abbreviation_isset;
  BOOL __index_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=abbreviation, setter=setAbbreviation:) NSString * abbreviation;
@property (nonatomic, retain, getter=index, setter=setIndex:) NSString * index;
#endif

- (id) initWithAbbreviation: (NSString *) abbreviation index: (NSString *) index;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) abbreviation;
- (void) setAbbreviation: (NSString *) abbreviation;
- (BOOL) abbreviationIsSet;

- (NSString *) index;
- (void) setIndex: (NSString *) index;
- (BOOL) indexIsSet;

@end

@implementation HPTGgetCard_args

- (id) initWithAbbreviation: (NSString *) abbreviation index: (NSString *) index
{
  self = [super init];
  __abbreviation = [abbreviation retain];
  __abbreviation_isset = YES;
  __index = [index retain];
  __index_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"abbreviation"])
  {
    __abbreviation = [[decoder decodeObjectForKey: @"abbreviation"] retain];
    __abbreviation_isset = YES;
  }
  if ([decoder containsValueForKey: @"index"])
  {
    __index = [[decoder decodeObjectForKey: @"index"] retain];
    __index_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__abbreviation_isset)
  {
    [encoder encodeObject: __abbreviation forKey: @"abbreviation"];
  }
  if (__index_isset)
  {
    [encoder encodeObject: __index forKey: @"index"];
  }
}

- (void) dealloc
{
  [__abbreviation release];
  [__index release];
  [super dealloc];
}

- (NSString *) abbreviation {
  return [[__abbreviation retain] autorelease];
}

- (void) setAbbreviation: (NSString *) abbreviation {
  [abbreviation retain];
  [__abbreviation release];
  __abbreviation = abbreviation;
  __abbreviation_isset = YES;
}

- (BOOL) abbreviationIsSet {
  return __abbreviation_isset;
}

- (void) unsetAbbreviation {
  [__abbreviation release];
  __abbreviation = nil;
  __abbreviation_isset = NO;
}

- (NSString *) index {
  return [[__index retain] autorelease];
}

- (void) setIndex: (NSString *) index {
  [index retain];
  [__index release];
  __index = index;
  __index_isset = YES;
}

- (BOOL) indexIsSet {
  return __index_isset;
}

- (void) unsetIndex {
  [__index release];
  __index = nil;
  __index_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAbbreviation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIndex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HPTGgetCard_args"];
  if (__abbreviation_isset) {
    if (__abbreviation != nil) {
      [outProtocol writeFieldBeginWithName: @"abbreviation" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __abbreviation];
      [outProtocol writeFieldEnd];
    }
  }
  if (__index_isset) {
    if (__index != nil) {
      [outProtocol writeFieldBeginWithName: @"index" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __index];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HPTGgetCard_args("];
  [ms appendString: @"abbreviation:"];
  [ms appendFormat: @"\"%@\"", __abbreviation];
  [ms appendString: @",index:"];
  [ms appendFormat: @"\"%@\"", __index];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface HPTGgetCard_result : NSObject <NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) success;
- (void) setSuccess: (NSString *) success;
- (BOOL) successIsSet;

@end

@implementation HPTGgetCard_result

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSString *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSString *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HPTGgetCard_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HPTGgetCard_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation HandyPTGClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_HPTGgetEvents: (int32_t) sinceIndex
{
  [outProtocol writeMessageBeginWithName: @"HPTGgetEvents" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"HPTGgetEvents_args"];
  [outProtocol writeFieldBeginWithName: @"sinceIndex" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: sinceIndex];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_HPTGgetEvents
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  HPTGgetEvents_result * result = [[[HPTGgetEvents_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"HPTGgetEvents failed: unknown result"];
}

- (NSArray *) HPTGgetEvents: (int32_t) sinceIndex
{
  [self send_HPTGgetEvents: sinceIndex];
  return [self recv_HPTGgetEvents];
}

- (void) send_HPTGdrawCard
{
  [outProtocol writeMessageBeginWithName: @"HPTGdrawCard" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"HPTGdrawCard_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_HPTGdrawCard
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  HPTGdrawCard_result * result = [[[HPTGdrawCard_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) HPTGdrawCard
{
  [self send_HPTGdrawCard];
  [self recv_HPTGdrawCard];
}

- (void) send_HPTGplayCard: (NSString *) abbreviation : (NSString *) index
{
  [outProtocol writeMessageBeginWithName: @"HPTGplayCard" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"HPTGplayCard_args"];
  if (abbreviation != nil)  {
    [outProtocol writeFieldBeginWithName: @"abbreviation" type: TType_STRING fieldID: 1];
    [outProtocol writeString: abbreviation];
    [outProtocol writeFieldEnd];
  }
  if (index != nil)  {
    [outProtocol writeFieldBeginWithName: @"index" type: TType_STRING fieldID: 2];
    [outProtocol writeString: index];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_HPTGplayCard
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  HPTGplayCard_result * result = [[[HPTGplayCard_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) HPTGplayCard: (NSString *) abbreviation : (NSString *) index
{
  [self send_HPTGplayCard: abbreviation : index];
  [self recv_HPTGplayCard];
}

- (void) send_HPTGlandCard: (NSString *) abbreviation : (NSString *) index
{
  [outProtocol writeMessageBeginWithName: @"HPTGlandCard" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"HPTGlandCard_args"];
  if (abbreviation != nil)  {
    [outProtocol writeFieldBeginWithName: @"abbreviation" type: TType_STRING fieldID: 1];
    [outProtocol writeString: abbreviation];
    [outProtocol writeFieldEnd];
  }
  if (index != nil)  {
    [outProtocol writeFieldBeginWithName: @"index" type: TType_STRING fieldID: 2];
    [outProtocol writeString: index];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_HPTGlandCard
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  HPTGlandCard_result * result = [[[HPTGlandCard_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) HPTGlandCard: (NSString *) abbreviation : (NSString *) index
{
  [self send_HPTGlandCard: abbreviation : index];
  [self recv_HPTGlandCard];
}

- (void) send_HPTGdiscardCard: (NSString *) abbreviation : (NSString *) index
{
  [outProtocol writeMessageBeginWithName: @"HPTGdiscardCard" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"HPTGdiscardCard_args"];
  if (abbreviation != nil)  {
    [outProtocol writeFieldBeginWithName: @"abbreviation" type: TType_STRING fieldID: 1];
    [outProtocol writeString: abbreviation];
    [outProtocol writeFieldEnd];
  }
  if (index != nil)  {
    [outProtocol writeFieldBeginWithName: @"index" type: TType_STRING fieldID: 2];
    [outProtocol writeString: index];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_HPTGdiscardCard
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  HPTGdiscardCard_result * result = [[[HPTGdiscardCard_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) HPTGdiscardCard: (NSString *) abbreviation : (NSString *) index
{
  [self send_HPTGdiscardCard: abbreviation : index];
  [self recv_HPTGdiscardCard];
}

- (void) send_HPTGgetCard: (NSString *) abbreviation : (NSString *) index
{
  [outProtocol writeMessageBeginWithName: @"HPTGgetCard" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"HPTGgetCard_args"];
  if (abbreviation != nil)  {
    [outProtocol writeFieldBeginWithName: @"abbreviation" type: TType_STRING fieldID: 1];
    [outProtocol writeString: abbreviation];
    [outProtocol writeFieldEnd];
  }
  if (index != nil)  {
    [outProtocol writeFieldBeginWithName: @"index" type: TType_STRING fieldID: 2];
    [outProtocol writeString: index];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_HPTGgetCard
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  HPTGgetCard_result * result = [[[HPTGgetCard_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"HPTGgetCard failed: unknown result"];
}

- (NSString *) HPTGgetCard: (NSString *) abbreviation : (NSString *) index
{
  [self send_HPTGgetCard: abbreviation : index];
  return [self recv_HPTGgetCard];
}

@end

@implementation HandyPTGProcessor

- (id) initWithHandyPTG: (id <HandyPTG>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_HPTGgetEvents_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"HPTGgetEvents"];
  }
  {
    SEL s = @selector(process_HPTGdrawCard_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"HPTGdrawCard"];
  }
  {
    SEL s = @selector(process_HPTGplayCard_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"HPTGplayCard"];
  }
  {
    SEL s = @selector(process_HPTGlandCard_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"HPTGlandCard"];
  }
  {
    SEL s = @selector(process_HPTGdiscardCard_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"HPTGdiscardCard"];
  }
  {
    SEL s = @selector(process_HPTGgetCard_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"HPTGgetCard"];
  }
  return self;
}

- (id<HandyPTG>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_HPTGgetEvents_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  HPTGgetEvents_args * args = [[HPTGgetEvents_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  HPTGgetEvents_result * result = [[HPTGgetEvents_result alloc] init];
  [result setSuccess: [mService HPTGgetEvents: [args sinceIndex]]];
  [outProtocol writeMessageBeginWithName: @"HPTGgetEvents"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_HPTGdrawCard_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  HPTGdrawCard_args * args = [[HPTGdrawCard_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  HPTGdrawCard_result * result = [[HPTGdrawCard_result alloc] init];
  [mService HPTGdrawCard];
  [outProtocol writeMessageBeginWithName: @"HPTGdrawCard"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_HPTGplayCard_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  HPTGplayCard_args * args = [[HPTGplayCard_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  HPTGplayCard_result * result = [[HPTGplayCard_result alloc] init];
  [mService HPTGplayCard: [args abbreviation]: [args index]];
  [outProtocol writeMessageBeginWithName: @"HPTGplayCard"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_HPTGlandCard_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  HPTGlandCard_args * args = [[HPTGlandCard_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  HPTGlandCard_result * result = [[HPTGlandCard_result alloc] init];
  [mService HPTGlandCard: [args abbreviation]: [args index]];
  [outProtocol writeMessageBeginWithName: @"HPTGlandCard"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_HPTGdiscardCard_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  HPTGdiscardCard_args * args = [[HPTGdiscardCard_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  HPTGdiscardCard_result * result = [[HPTGdiscardCard_result alloc] init];
  [mService HPTGdiscardCard: [args abbreviation]: [args index]];
  [outProtocol writeMessageBeginWithName: @"HPTGdiscardCard"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_HPTGgetCard_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  HPTGgetCard_args * args = [[HPTGgetCard_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  HPTGgetCard_result * result = [[HPTGgetCard_result alloc] init];
  [result setSuccess: [mService HPTGgetCard: [args abbreviation]: [args index]]];
  [outProtocol writeMessageBeginWithName: @"HPTGgetCard"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

