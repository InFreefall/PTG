'''
Created on Jul 10, 2011

@author: mitchell
'''

import os
from PyQt4.QtGui import QPixmap
from PyQt4.QtCore import Qt
import settingsManager
import cardCrawler
import statedb

class QCard(object):
    def __init__(self, abbreviation, index):
        self.abbreviation = abbreviation
        self.index = index
        self._pixmap = None
        self.tapped = False
        self._upsideDown = False
        self.isFlipCard = False
        try:
            statedb.commonDB().nameForAbbreviationIndex(abbreviation, "%s000"%(index))
            self.isFlipCard = True
        except TypeError:
            pass
    
    def __getstate__(self):  # For pickling support
        result = self.__dict__.copy()
        del result['_pixmap']
        return result
    
    def __setstate__(self, dict):
        self.__dict__ = dict
        self._pixmap = None
    
    def pixmap(self):
        if self._pixmap is None:
            if not self.upsideDown:
                if self.abbreviation == "tokens":
                    path = os.path.join(settingsManager.settings['imagesDir'], 'tokens', self.index)
                else:
                    path = os.path.join(settingsManager.settings['cardsDir'],self.abbreviation,"%s.jpg"%(self.index))
                    if not os.path.isfile(path):
                        cardCrawler.crawlCardAndInfo(self.abbreviation, self.index)
            else: # Card is upside down
                if self.isFlipCard:
                    path = os.path.join(settingsManager.settings['cardsDir'],self.abbreviation,"%s000.jpg"%(self.index))
                else:
                    if not self.abbreviation.startswith('ygo'): # Is a Magic card
                        path = os.path.join(settingsManager.settings['imagesDir'],'back.jpg')
                    else: # Is a Yu-Gi-Oh card
                        path = os.path.join(settingsManager.settings['imagesDir'],'yugiohBack.jpg')
            self._pixmap = QPixmap(path).scaledToHeight(445,Qt.SmoothTransformation) # In case card is not already the correct height
            
        return self._pixmap

    def bottomPixmap(self): # If a card is flipped, allow the bottom of the card to be seen in certain cases
        if not self.upsideDown:
            return self.pixmap()
        if self.abbreviation == "tokens":
            path = os.path.join(settingsManager.settings['imagesDir'],'tokens',self.index)
        else:
            path = os.path.join(settingsManager.settings['cardsDir'],self.abbreviation,"%s.jpg"%(self.index))
            if not os.path.isfile(path):
                cardCrawler.crawlCardAndInfo(self.abbreviation, self.index)
        return QPixmap(path).scaledToHeight(445,Qt.SmoothTransformation)
    
    def setUpsideDown(self, value):
        if value is not self._upsideDown:
            self._pixmap = None
        self._upsideDown = value
    def getUpsideDown(self):
        return self._upsideDown
    upsideDown = property(getUpsideDown, setUpsideDown)
